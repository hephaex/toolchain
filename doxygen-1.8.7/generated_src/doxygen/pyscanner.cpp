
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pyscannerYY_create_buffer
#define yy_delete_buffer pyscannerYY_delete_buffer
#define yy_flex_debug pyscannerYY_flex_debug
#define yy_init_buffer pyscannerYY_init_buffer
#define yy_flush_buffer pyscannerYY_flush_buffer
#define yy_load_buffer_state pyscannerYY_load_buffer_state
#define yy_switch_to_buffer pyscannerYY_switch_to_buffer
#define yyin pyscannerYYin
#define yyleng pyscannerYYleng
#define yylex pyscannerYYlex
#define yylineno pyscannerYYlineno
#define yyout pyscannerYYout
#define yyrestart pyscannerYYrestart
#define yytext pyscannerYYtext
#define yywrap pyscannerYYwrap
#define yyalloc pyscannerYYalloc
#define yyrealloc pyscannerYYrealloc
#define yyfree pyscannerYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscannerYYrestart(pyscannerYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pyscannerYYleng;

extern FILE *pyscannerYYin, *pyscannerYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscannerYYrestart()), so that the user can continue scanning by
	 * just pointing pyscannerYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscannerYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pyscannerYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscannerYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscannerYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscannerYYrestart (FILE *input_file  );
void pyscannerYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscannerYY_create_buffer (FILE *file,int size  );
void pyscannerYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscannerYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscannerYYpop_buffer_state (void );

static void pyscannerYYensure_buffer_stack (void );
static void pyscannerYY_load_buffer_state (void );
static void pyscannerYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pyscannerYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscannerYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscannerYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pyscannerYYalloc (yy_size_t  );
void *pyscannerYYrealloc (void *,yy_size_t  );
void pyscannerYYfree (void *  );

#define yy_new_buffer pyscannerYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscannerYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscannerYYin = (FILE *) 0, *pyscannerYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscannerYYlineno;

int pyscannerYYlineno = 1;

extern char *pyscannerYYtext;
#define yytext_ptr pyscannerYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscannerYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscannerYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[764] =
    {   0,
    16483,16483,  101,  101,   26,   26,   32,   32,   37,   37,
      154,  152,  153,  151,  153,   21,  152,  153,   17,  151,
      153,   12,   21,  152,  153,   21,  152,  153,   11,   21,
      152,  153,   21,  152,  153,   15,   21,  152,  153,   15,
       21,  152,  153,   15,   21,  152,  153,   15,   21,  152,
      153,   15,   21,  152,  153,   16,   21,  152,  153,   15,
       21,  152,  153,16393,16394,   15,   21,  152,  153,16393,
    16394,   15,   21,  152,  153,16393,16394,   15,   21,  152,
      153,16393,16394,   15,   21,  152,  153,16393,16394,   48,
       49,  152,  153,   46,  151,  153,   45,   49,  152,  153,

       49,  152,  153,   44,   49,  152,  153,   49,  152,  153,
       47,   49,  152,  153,   47,   49,  152,  153,   47,   48,
       49,  152,  153,  126,  128,  152,  153,  128,  152,  153,
      127,  151,  153,  128,  152,  153,  128,  152,  153,  125,
      128,  152,  153,  131,  133,  152,  153,  132,  151,  153,
      133,  152,  153,  131,  133,  152,  153,  129,  133,  152,
      153,  152,  153,   66,  152,  153,   65,  152,  153,   64,
      152,  153,   73,  152,  153,   67,  152,  153,   73,  152,
      153,   70,  152,  153,   67,   73,  152,  153,   71,  152,
      153,   69,   73,  152,  153,   68,   73,  152,  153,   56,

       60,  152,  153,   60,  152,  153,   59,  151,  153,16434,
       55,   60,  152,  153,   58,   60,  152,  153,   54,   60,
      152,  153,   53,   60,  152,  153,   58,   60,  152,  153,
       77,  152,  153,   78,  151,  153,   74,   77,  152,  153,
       76,   77,  152,  153,   75,   77,  152,  153,   91,  152,
      153,   92,  152,  153,   92,  152,  153,   93,  152,  153,
       94,  152,  153,  152,  153,   95,  151,  153, 8291,  152,
      153,  152,  153,  152,  153,   98,  152,  153,   85,   88,
      152,  153,   88,  152,  153,   86,  151,  153,   84,   88,
      152,  153,   88,  152,  153,   83,   88,  152,  153,   82,

       88,  152,  153,  113,  152,  153,  101,  113,  152,  153,
      114,  151,  153,  105,  113,  152,  153,  111,  113,  152,
      153,  104,  113,  152,  153,  108,  113,  152,  153,  102,
      113,  152,  153,  102,  113,  152,  153,  100,  113,  152,
      153,  112,  113,  152,  153,  112,  113,  152,  153,  112,
      113,  152,  153,  109,  113,  152,  153,  112,  113,  152,
      153,  110,  113,  152,  153,  122,  152,  153,  121,  151,
      153,  119,  152,  153,  120,  151,  153,  117,  119,  152,
      153,  115,  119,  152,  153,  116,  119,  152,  153,  118,
      119,  152,  153,  138,  139,  152,  153,  139,  152,  153,

      137,  139,  152,  153,  139,  152,  153,  144,  145,  152,
      153,  143,  145,  152,  153,  145,  152,  153,  145,  152,
      153,  148,  150,  152,  153,  148,  149,  151,  153,  148,
      150,  152,  153,  148,  150,  152,  153,  150,  152,  153,
       27,  152,  153,   26,   27,  152,  153,   25,  151,  153,
       22,   27,  152,  153,   23,   27,  152,  153,   23,   27,
      152,  153,   34,  152,  153,   32,   34,  152,  153,   31,
      151,  153,   28,   34,  152,  153,   33,   34,  152,  153,
       30,   34,  152,  153,16413,   38,  152,  153,   37,   38,
      152,  153,   36,  151,  153,   35,   38,  152,  153,   17,

       14,   15,   15,   15,   15,   15,   16,16393,16394,16393,
    16394,16393,16394,16393,16394,16393,16394,   15,16393,16394,
       15,16393,16394,   15,16393,16394,   15,16393,16394,   15,
    16393,16394,   48,   43,   47,   47,   47,   48,  126,  125,
      131,  130,  131,  129,  129,   66,   65,   64,   67,   72,
       71,   68,   56,16434,   58,   58,   53,   52,   57,   58,
       91,   92,   94,   95,   98,   85,   87,   82,   81,  101,
      111,  102,  102,  102,  112,  105,  104,  112,  118,  138,
      135,  135,  134,  144,  141,  141,  140,  148,  148,  148,
       26,   23,   23,   32, 8221,   30,16413,   37,   35,   18,

       14,   20,   19,   15,   15,   15,   15,16393,16394,16393,
    16394,16393,16394,16393,16394,16393,16394, 8202, 8202, 8202,
       15,16393,16394,   15,16393,16394,   15,16393,16394,   15,
    16393,16394,   40,   43,   42,   41,   47,  123,  124,   72,
       51, 8242,   61,   58,   63,   63,   62,   57,   58,   94,
       96,   97,   79,   89,   87,   90,  106,  107,  103,  102,
      102,  136,  142,  146,  147,   23,   23, 8221,   35,   18,
       19,   15,    2,   15,   15,16393,16394,16393,16394,16393,
    16394,16393,16394,   15,16393,16394,    1,    2,   15,16393,
    16394,   15,16393,16394,   40,   41,   47,  123,  124,   61,

       62,   94,   96,   97,   80,   89,   90,  106,  107,  103,
      102,  146,  147,   23,   23,   35,   15,    6,   15,16393,
    16394,    1,16393,16394,16393,16394,   15,16393,16394,    5,
        6,   15,16393,16394,  103,   23,    4,   15,16393,16394,
        5,16393,16394,    3,    4,   15,16393,16394,16423,   23,
       24,    8,    3,16393,16394,    7,    8,16423, 8231,   24,
        7, 8201,   13
    } ;

static yyconst flex_int16_t yy_accept[455] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   26,   29,   33,   36,   40,   44,   48,   52,
       56,   60,   66,   72,   78,   84,   90,   94,   97,  101,
      104,  108,  111,  115,  119,  124,  128,  131,  134,  137,
      140,  144,  148,  151,  154,  158,  162,  164,  167,  170,
      173,  176,  179,  182,  185,  189,  192,  196,  200,  204,

      207,  211,  215,  219,  223,  227,  231,  234,  237,  241,
      245,  249,  252,  255,  258,  261,  264,  266,  269,  272,
      274,  276,  279,  283,  286,  289,  293,  296,  300,  304,
      307,  311,  314,  318,  322,  326,  330,  334,  338,  342,
      346,  350,  354,  358,  362,  366,  369,  372,  375,  378,
      382,  386,  390,  394,  398,  401,  405,  408,  412,  416,
      419,  422,  426,  430,  434,  438,  441,  444,  448,  451,
      455,  459,  463,  466,  470,  473,  477,  481,  486,  489,
      493,  496,  500,  501,  501,  502,  502,  502,  502,  503,
      504,  505,  506,  507,  508,  510,  512,  514,  516,  518,

      518,  521,  521,  524,  527,  530,  533,  534,  534,  535,
      535,  535,  536,  537,  539,  540,  540,  540,  541,  542,
      542,  543,  544,  545,  546,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  555,  555,  555,  556,  557,
      557,  558,  559,  561,  562,  563,  563,  564,  564,  565,
      565,  565,  566,  567,  567,  567,  567,  568,  568,  569,
      570,  571,  571,  572,  572,  572,  573,  574,  575,  575,
      576,  577,  578,  579,  580,  581,  581,  582,  583,  584,
      585,  585,  586,  587,  588,  589,  589,  590,  591,  592,
      592,  592,  593,  594,  595,  595,  596,  598,  599,  599,

      599,  600,  601,  602,  603,  604,  604,  605,  606,  607,
      608,  610,  612,  614,  616,  618,  619,  620,  621,  624,
      627,  630,  633,  634,  635,  636,  637,  638,  639,  640,
      641,  642,  643,  643,  644,  646,  647,  648,  650,  651,
      652,  653,  653,  654,  654,  655,  656,  657,  658,  659,
      660,  661,  662,  663,  663,  664,  664,  665,  666,  666,
      667,  668,  669,  669,  670,  671,  672,  672,  673,  674,
      675,  676,  678,  680,  682,  684,  684,  684,  684,  687,
      689,  692,  695,  696,  697,  698,  699,  700,  701,  702,
      703,  704,  705,  706,  707,  708,  709,  710,  710,  711,

      712,  713,  714,  715,  716,  717,  717,  718,  719,  720,
      722,  723,  725,  727,  727,  730,  732,  735,  735,  735,
      736,  737,  737,  738,  739,  741,  742,  744,  744,  746,
      749,  750,  752,  752,  753,  754,  756,  756,  758,  758,
      759,  760,  761,  761,  762,  762,  762,  762,  762,  763,
      763,  763,  764,  764
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,   20,   21,   21,   21,   21,   22,   21,
       23,   23,   23,   24,   23,   25,   23,   23,   23,   23,
       23,   26,   23,   23,   27,   23,   23,   28,   23,   23,
       29,   30,   31,    1,   32,    7,   33,   21,   34,   35,

       36,   37,   23,   38,   39,   24,   23,   40,   41,   23,
       42,   43,   23,   44,   45,   46,   47,   23,   23,   28,
       48,   23,   49,    7,   31,    7,    1,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
        1,    1,    6,    7,    8,    8,    8,    1,    9,    1,
       10,   10,   11,   11,   11,   11,   11,   11,    1,   12,
        1,   11,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    1,   13
    } ;

static yyconst flex_int16_t yy_base[532] =
    {   0,
     1585, 1580,    0,   50,  100,    0, 1579, 1578,  149,  153,
      156,  161,  167,    0,  217,    0,  266,  273,  279,  281,
      294,    0,  344,    0,  394,  402,  410,  418,  426,    0,
     1577, 1576,  476,    0,  524,  525,  531,  532,  538,  539,
      569,    0,  619,    0,  669,    0, 1569, 1928, 1928, 1928,
     1551, 1545, 1541, 1536, 1498,    0, 1502, 1505, 1494, 1494,
      718,  398,  719,  529,  720,  721,    0, 1928, 1528, 1525,
     1522, 1928,    0, 1493,  764,    0, 1928, 1928, 1521, 1515,
     1518,    0,  271, 1928,  543, 1513,  548, 1928, 1928,    0,
     1928, 1516,    0, 1928, 1928, 1515, 1928,    0,    0, 1928,

      550, 1501, 1482, 1472,  163, 1473, 1928, 1928, 1928, 1928,
     1928,    0, 1460, 1928, 1928, 1440,  283, 1928, 1928, 1448,
     1441,  406,    0, 1928, 1440, 1438,    0, 1432,  556, 1928,
     1426, 1928, 1412,    0, 1407, 1928,  801,  710, 1928,    0,
      393,  723, 1928,  725, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928,    0,    0, 1406, 1928,  561,    0, 1928, 1400,
      734, 1377, 1376, 1400, 1387,  738, 1928, 1392, 1928, 1928,
      730,  746, 1928, 1391, 1928, 1928, 1928,  743, 1928, 1390,
     1928,  740, 1386, 1381,    0,    0, 1374, 1333,    0, 1334,
     1317, 1308, 1304,  768,  759,  770,  802,  789,  790,  804,

      809,  745,  817,  818,  820,  825,    0, 1341,    0,    0,
     1337,    0, 1304,    0,    0, 1337, 1333, 1331,    0,  784,
     1928,  794, 1325, 1324,  833, 1928, 1928,    0, 1327,    0,
     1326,    0,    0,  795, 1319, 1320, 1307,    0,  837, 1302,
      796, 1928,    0,    0, 1304,    0, 1289,  843, 1928, 1288,
     1283,  845,    0, 1273, 1276, 1272,    0, 1266,  850, 1928,
     1269, 1254,    0, 1246,  841,  849,  855, 1928,    0,    0,
     1928, 1928,  870,    0,    0, 1248, 1928,  857, 1928,    0,
     1242, 1928,  874, 1928, 1218,  878, 1242, 1238, 1240,  810,
     1235,  847,  880, 1234,  883, 1233,  885, 1232,  886, 1231,

      888, 1226,    0, 1928, 1223, 1193, 1180, 1222, 1182, 1180,
      865,  889,  890,  891,  895, 1928,  897, 1177,  899,  901,
      902,  905, 1214,    0, 1928, 1211, 1166, 1052, 1051,    0,
     1928, 1052, 1051, 1048,    0, 1928, 1047,    0, 1036, 1045,
     1044,    0, 1045, 1044, 1041,    0, 1039, 1029, 1027,  913,
     1928,  513, 1928,  903, 1928,  909, 1025, 1023, 1009,  911,
      917,  993,  990,  932, 1928, 1928,  944,  942,  984,  959,
      911,  913,  934,  937,  943,  914,  897,  884,  946,  948,
      949,  950, 1928, 1928,  903, 1928, 1928, 1928, 1928,  840,
     1928, 1928, 1928, 1928, 1928, 1928, 1928,  958, 1928, 1928,

     1928, 1928,  940,  958,  962,  795,  830,  828,  739,  961,
      964,  969,  977,  720,  979,  980,  982,    0,  988,  992,
      998,  724,  727,  565,  991,  995, 1011,  524, 1013, 1015,
     1016,  975,  510,  423, 1017, 1018,  375, 1020, 1021, 1022,
     1928, 1024,  375, 1023,  360,  247,  235,  232, 1928,  118,
      118, 1928, 1928, 1057, 1070, 1083, 1096, 1109, 1122, 1135,
     1148, 1161, 1174, 1187, 1200, 1206, 1218, 1230, 1243, 1256,
     1262, 1275, 1288, 1294, 1307, 1313, 1326, 1338, 1351, 1364,
     1370, 1377, 1390, 1399, 1412, 1425, 1431, 1437, 1450, 1463,
     1476, 1489, 1502, 1514, 1526, 1538, 1551, 1564, 1576, 1589,

     1602, 1615, 1628, 1640, 1653, 1666, 1672, 1676, 1683, 1696,
     1708, 1721, 1734, 1740, 1743, 1749, 1762, 1775, 1787, 1799,
     1811, 1823, 1835, 1848, 1854, 1861, 1874, 1886, 1898, 1902,
     1914
    } ;

static yyconst flex_int16_t yy_def[532] =
    {   0,
      454,  454,  453,  453,  453,    5,  454,  454,  455,  455,
      456,  456,  453,   13,  453,   15,  457,  457,  458,  458,
      453,   21,  453,   23,  459,  459,  460,  460,  453,   29,
      461,  461,  453,   33,  462,  462,  463,  463,  464,  464,
      453,   41,  453,   43,  453,   45,  453,  453,  453,  453,
      453,  453,  465,  453,  453,  466,  466,  466,  466,  466,
      467,  468,  468,  468,  468,  468,  469,  453,  453,  470,
      453,  453,  471,  471,  471,  472,  453,  453,  453,  453,
      453,  473,  453,  453,  473,  453,  453,  453,  453,  474,
      453,  453,  475,  453,  453,  453,  453,  476,  477,  453,

      478,  453,  479,  453,  453,  480,  453,  453,  453,  453,
      453,  481,  453,  453,  453,  482,  453,  453,  453,  453,
      453,  453,  483,  453,  484,  453,  485,  453,  453,  453,
      453,  453,  453,  486,  453,  453,  453,  453,  453,  487,
      487,  487,  453,  487,  453,  453,  453,  453,  453,  453,
      453,  453,  488,  489,  453,  453,  490,  491,  453,  453,
      492,  493,  493,  453,  453,  493,  453,  453,  453,  453,
      494,  494,  453,  453,  453,  453,  453,  495,  453,  453,
      453,  496,  453,  453,  497,  498,  453,  453,  466,  466,
      466,  466,  466,  467,  499,  499,  499,  499,  499,  453,

      468,  500,  468,  468,  468,  468,  469,  453,  501,  502,
      453,  471,  471,   75,  472,  453,  453,  453,  473,  453,
      453,  473,  453,  453,  453,  453,  453,  474,  453,  503,
      453,  476,  477,  478,  453,  504,  453,  479,  505,  453,
      453,  453,  506,  507,  453,  508,  509,  453,  453,  453,
      453,  453,  510,  453,  511,  453,  512,  453,  453,  453,
      453,  453,  513,  453,  453,  453,  453,  453,  514,  515,
      453,  453,  515,  516,  517,  453,  453,  453,  453,  518,
      453,  453,  453,  453,  493,  493,  453,  453,  453,  453,
      519,  520,  520,  453,  453,  453,  521,  453,  453,  522,

      523,  453,  524,  453,  453,  453,  525,  525,  525,  525,
      499,  499,  499,  499,  499,  453,  453,  453,  468,  468,
      468,  468,  453,  501,  453,  453,  471,  453,  453,  503,
      453,  453,  504,  453,  479,  453,  453,  506,  526,  453,
      453,  527,  453,  511,  453,  512,  453,  453,  453,  453,
      453,  514,  453,  453,  453,  453,  453,  453,  519,  528,
      520,  453,  522,  529,  453,  453,  453,  525,  453,  525,
      525,  499,  499,  499,  499,  453,  453,  453,  468,  453,
      468,  468,  453,  453,  471,  453,  453,  453,  453,  526,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  528,  520,  529,  453,  525,  453,  525,  499,
      453,  499,  499,  453,  468,  453,  468,  530,  453,  453,
      520,  453,  453,  525,  499,  453,  499,  453,  453,  468,
      531,  520,  453,  453,  453,  499,  453,  453,  453,  531,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,    0,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453
    } ;

static yyconst flex_int16_t yy_nxt[1979] =
    {   0,
       50,   50,   51,   50,   52,   53,   50,   54,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
       56,   56,   56,   56,   56,   56,   56,   56,   50,   50,
       50,   56,   56,   57,   58,   56,   59,   56,   60,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   50,   56,
       50,   61,   51,   50,   52,   53,   50,   54,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
       62,   62,   62,   62,   62,   62,   62,   62,   50,   50,
       50,   62,   62,   63,   64,   62,   65,   62,   66,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   50,   62,

       67,   67,   68,   67,   69,   70,   67,   71,   67,   67,
       67,   67,   67,   72,   67,   67,   67,   67,   67,   67,
       73,   73,   73,   73,   73,   73,   73,   73,   67,   67,
       67,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   74,   73,   73,   73,   67,   75,
       77,   78,  452,   79,   81,   78,   80,   79,   83,  451,
       80,   84,   85,   83,  241,  242,   86,   48,   87,   49,
       48,   48,   48,   48,   48,   88,   48,   48,   48,   48,
       48,   48,   48,   48,   89,   48,   48,   90,   90,   90,
       90,   90,   90,   90,   90,   48,   48,   48,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   48,   90,   91,   92,   49,
       91,   91,   93,   91,   91,   48,   94,   91,   91,   95,
       91,   91,   91,   91,   96,   97,   91,   98,   98,   98,
       98,   98,   98,   98,   98,   91,   91,   91,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   91,   98,  100,  101,  450,
      102,  103,  220,  104,  105,  101,  221,  102,  106,  100,
      104,  108,  449,  108,  248,  249,  100,  109,  110,  109,
      110,  111,  448,  111,   48,   48,   49,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,  112,  112,  112,  112,  112,  112,
      112,  112,   48,   48,   48,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   48,  112,   48,  113,   49,   48,   48,   48,
       48,   48,  114,  114,   48,   48,  114,   48,   48,   48,
       48,  115,   48,   48,  116,  116,  116,  116,  116,  116,
      116,  116,   48,   48,   48,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,   48,  116,   48,  117,  118,  271,  120,  200,

      272,  121,   48,  122,  118,  447,  120,  252,  249,  121,
      446,  124,  125,   48,  126,  127,  202,  128,  445,  129,
      125,   48,  126,  127,  434,  128,  130,  131,  132,  130,
      133,  134,  130,  135,  136,  130,  130,  130,  130,  130,
      137,  138,  138,  130,  139,  130,  140,  140,  140,  140,
      140,  141,  142,  140,  143,  130,  130,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  141,
      140,  140,  144,  140,  145,  140,  148,  148,  149,  148,
      150,  148,  148,  148,  151,  152,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  153,  153,  153,  153,

      153,  153,  153,  153,  151,  148,  152,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  151,  153,   49,   49,  155,  155,
      200,  156,  156,   49,   49,  159,  159,  400,  160,  160,
      163,  163,  164,  164,  222,  165,  165,  202,  223,  225,
      443,  234,  400,  157,  157,  235,  226,  259,  260,  437,
      161,  161,  278,  279,  204,  227,  434,  166,  166,  167,
      168,  169,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  170,  167,  167,  167,  167,  167,  167,  171,
      171,  171,  171,  171,  171,  171,  171,  167,  167,  167,

      171,  171,  171,  171,  171,  171,  171,  172,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  167,  171,  173,
      174,  175,  173,  173,  173,  173,  173,  173,  173,  176,
      173,  177,  173,  173,  173,  173,  173,  173,  173,  178,
      178,  178,  178,  178,  178,  178,  178,  173,  173,  173,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  173,  178,  179,
      180,  181,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  182,
      182,  182,  182,  182,  182,  182,  182,  179,  179,  179,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  179,  182,  194,
      200,  200,  200,  265,  267,  267,  267,  271,  423,  271,
      272,  290,  272,  268,  268,  283,  284,  202,  202,  202,
      453,  299,  285,  291,  295,  285,  317,  290,  273,  268,
      273,  196,  197,  300,  198,  296,  199,  433,  203,  291,
      200,  206,  428,  205,  207,  207,  273,  207,  273,  194,
      207,  200,  207,  207,  207,  207,  207,  202,  214,  214,
      214,  207,  207,  207,  424,  220,  293,  318,  202,  221,
      200,  200,  207,  207,  207,  222,  234,  241,  242,  223,

      235,  196,  197,  200,  198,  200,  199,  202,  202,  312,
      200,  290,  207,  214,  265,  266,  266,  267,  200,  200,
      202,  200,  202,  291,  268,  268,  200,  202,  269,  408,
      315,  423,  314,  422,  225,  202,  202,  313,  202,  336,
      268,  226,  238,  202,  248,  249,  252,  249,  290,  319,
      227,  259,  260,  246,  320,  350,  350,  350,  354,  279,
      291,  321,  265,  266,  266,  267,  200,  322,  265,  267,
      267,  267,  268,  351,  271,  356,  284,  272,  268,  268,
      453,  290,  285,  202,  295,  285,  295,  299,  351,  299,
      200,  200,  200,  291,  268,  296,  200,  296,  376,  300,

      200,  300,  380,  200,  354,  279,  200,  202,  202,  202,
      356,  284,  290,  202,  200,  376,  418,  202,  290,  202,
      202,  372,  361,  202,  291,  414,  373,  350,  350,  350,
      291,  202,  374,  299,  398,  411,  399,  375,  200,  377,
      378,  290,  381,  379,  200,  300,  382,  200,  398,  380,
      416,  200,  202,  291,  409,  202,  377,  410,  404,  290,
      408,  202,  200,  299,  202,  411,  202,  202,  202,  419,
      426,  291,  420,  420,  420,  300,  442,  412,  200,  202,
      429,  416,  202,  200,  413,  369,  407,  202,  291,  406,
      415,  363,  435,  417,  362,  202,  426,  202,  202,  290,

      202,  421,  420,  420,  420,  425,  420,  420,  420,  202,
      359,  291,  200,  202,  429,  399,  438,  439,  435,  444,
      427,  438,  439,  439,  444,  442,  402,  430,  401,  202,
      397,  202,  396,  202,  441,  202,  202,  291,  202,  441,
      441,  202,  395,  432,  394,  343,  343,  392,  391,  246,
      389,  388,  332,  332,  387,  386,  436,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,

      185,  185,  385,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  189,  384,  189,  189,  383,  189,  195,
      378,  371,  370,  369,  368,  367,  366,  195,  195,  365,
      195,  201,  363,  298,  362,  294,  359,  201,  201,  201,
      201,  289,  201,  207,  207,  358,  357,  286,  207,  355,
      207,  207,  353,  349,  207,  207,  209,  209,  348,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  212,
      261,  212,  212,  347,  212,  215,  345,  343,  342,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  219,  219,
      341,  219,  340,  219,  219,  219,  219,  219,  219,  219,

      219,  228,  246,  228,  228,  245,  228,  230,  230,  337,
      230,  334,  230,  230,  230,  230,  230,  230,  230,  230,
      232,  332,  232,  232,  331,  232,  233,  231,  229,  224,
      224,  233,  218,  233,  233,  233,  233,  233,  233,  236,
      329,  328,  236,  327,  326,  323,  310,  236,  236,  309,
      236,  238,  238,  308,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  243,  243,  307,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  244,  306,  244,
      244,  305,  244,  247,  247,  302,  247,  247,  183,  247,
      253,  298,  294,  289,  288,  253,  253,  253,  253,  253,

      253,  253,  253,  255,  287,  286,  286,  281,  255,  255,
      276,  255,  257,  257,  264,  257,  262,  257,  257,  257,
      257,  257,  257,  257,  257,  263,  263,  261,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  270,  258,
      270,  270,  256,  270,  274,  254,  274,  274,  251,  274,
      275,  275,  250,  246,  275,  275,  275,  275,  275,  275,
      275,  245,  275,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  280,  280,  239,  240,
      280,  280,  280,  280,  280,  280,  280,  239,  280,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  285,  285,  285,  237,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  292,  231,  229,  224,  218,
      292,  292,  217,  292,  292,  216,  292,  297,  213,  211,
      210,  297,  208,  297,  193,  297,  297,  192,  297,  301,
      191,  190,  188,  187,  301,  301,  186,  301,  301,  184,
      301,  303,  303,  183,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  304,  304,  304,  304,  453,  304,
      304,  304,  304,  304,  304,  304,  304,  311,  147,  147,
       49,   49,   49,  311,  311,  311,  311,   49,  311,  316,
      316,  316,  316,  316,  316,  316,  316,  453,  316,  316,

      316,  316,  324,  324,  453,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  325,  325,  325,  325,  453,
      325,  325,  325,  325,  325,  325,  325,  325,  330,  330,
      453,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  333,  453,  453,  453,  453,  453,  333,  453,  333,
      333,  453,  333,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  338,  338,  453,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  244,
      453,  244,  244,  453,  244,  339,  339,  453,  339,  247,
      247,  453,  247,  247,  453,  247,  253,  453,  453,  453,

      453,  253,  253,  253,  253,  253,  253,  253,  253,  344,
      453,  453,  453,  453,  453,  344,  453,  344,  344,  453,
      344,  346,  346,  453,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  263,  263,  453,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  352,  453,  352,
      270,  453,  270,  270,  453,  270,  274,  453,  274,  274,
      453,  274,  275,  275,  453,  453,  275,  275,  275,  275,
      275,  275,  275,  453,  275,  280,  280,  453,  453,  280,
      280,  280,  280,  280,  280,  280,  453,  280,  360,  453,
      453,  453,  453,  453,  453,  453,  360,  360,  453,  360,

      292,  453,  453,  453,  453,  292,  292,  453,  292,  292,
      453,  292,  297,  453,  453,  453,  297,  453,  297,  453,
      297,  297,  453,  297,  364,  453,  453,  453,  453,  453,
      453,  453,  364,  364,  453,  364,  301,  453,  453,  453,
      453,  301,  301,  453,  301,  301,  453,  301,  303,  303,
      453,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  189,  453,  189,  189,  453,  189,  390,  390,  453,
      390,  390,  453,  390,  393,  393,  393,  393,  453,  393,
      393,  393,  393,  393,  393,  393,  393,  403,  453,  453,
      453,  453,  403,  403,  453,  403,  403,  453,  403,  405,

      453,  453,  453,  453,  405,  405,  453,  405,  405,  453,
      405,  431,  431,  453,  431,  440,  453,  453,  453,  453,
      453,  440,  440,  440,  440,  453,  440,   47,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453
    } ;

static yyconst flex_int16_t yy_chk[1979] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        9,    9,  451,    9,   10,   10,    9,   10,   11,  450,
       10,   11,   12,   12,  105,  105,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   17,   17,  448,
       17,   17,   83,   17,   18,   18,   83,   18,   18,   17,
       18,   19,  447,   20,  117,  117,   18,   19,   19,   20,
       20,   19,  446,   20,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,  141,   25,   62,

      141,   25,   26,   26,   26,  445,   26,  122,  122,   26,
      443,   27,   27,   25,   27,   27,   62,   27,  437,   28,
       28,   26,   28,   28,  434,   28,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   35,   36,   35,   36,
       64,   35,   36,   37,   38,   37,   38,  352,   37,   38,
       39,   40,   39,   40,   85,   39,   40,   64,   85,   87,
      433,  101,  352,   35,   36,  101,   87,  129,  129,  428,
       37,   38,  157,  157,   64,   87,  424,   39,   40,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   61,
       63,   65,   66,  138,  138,  138,  138,  142,  423,  144,
      142,  171,  144,  138,  138,  161,  161,   63,   65,   66,
      166,  182,  166,  171,  178,  166,  202,  172,  142,  138,
      144,   61,   61,  182,   61,  178,   61,  422,   63,  172,
      195,   66,  414,   65,   75,   75,  142,   75,  144,  194,
       75,  196,   75,   75,   75,   75,   75,  195,   75,   75,
       75,   75,   75,   75,  409,  220,  172,  202,  196,  220,
      198,  199,   75,   75,   75,  222,  234,  241,  241,  222,

      234,  194,  194,  197,  194,  200,  194,  198,  199,  196,
      201,  290,   75,   75,  137,  137,  137,  137,  203,  204,
      197,  205,  200,  290,  137,  137,  206,  201,  137,  408,
      199,  407,  198,  406,  225,  203,  204,  197,  205,  239,
      137,  225,  239,  206,  248,  248,  252,  252,  292,  203,
      225,  259,  259,  390,  204,  265,  265,  265,  278,  278,
      292,  205,  266,  266,  266,  266,  311,  206,  267,  267,
      267,  267,  266,  266,  273,  283,  283,  273,  267,  267,
      286,  293,  286,  311,  295,  286,  297,  299,  266,  301,
      312,  313,  314,  293,  267,  295,  315,  297,  317,  299,

      319,  301,  320,  321,  354,  354,  322,  312,  313,  314,
      356,  356,  360,  315,  372,  376,  385,  319,  361,  320,
      321,  312,  293,  322,  360,  378,  313,  350,  350,  350,
      361,  372,  314,  364,  350,  373,  350,  315,  374,  317,
      377,  403,  321,  319,  375,  364,  322,  379,  350,  380,
      381,  382,  373,  403,  371,  374,  376,  372,  361,  404,
      370,  375,  410,  405,  379,  411,  380,  381,  382,  398,
      412,  404,  398,  398,  398,  405,  432,  374,  413,  410,
      415,  416,  411,  417,  375,  369,  368,  412,  432,  367,
      379,  363,  425,  382,  362,  413,  426,  415,  416,  421,

      417,  404,  419,  419,  419,  410,  420,  420,  420,  425,
      359,  421,  427,  426,  429,  420,  430,  431,  435,  436,
      413,  438,  439,  440,  444,  442,  358,  417,  357,  427,
      349,  429,  348,  430,  431,  435,  436,  442,  438,  439,
      440,  444,  347,  421,  345,  344,  343,  341,  340,  339,
      337,  334,  333,  332,  329,  328,  427,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,

      465,  465,  327,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  466,  326,  466,  466,  323,  466,  467,
      318,  310,  309,  308,  307,  306,  305,  467,  467,  302,
      467,  468,  300,  298,  296,  294,  291,  468,  468,  468,
      468,  289,  468,  469,  469,  288,  287,  285,  469,  281,
      469,  469,  276,  264,  469,  469,  470,  470,  262,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  471,
      261,  471,  471,  258,  471,  472,  256,  255,  254,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  473,  473,
      251,  473,  250,  473,  473,  473,  473,  473,  473,  473,

      473,  474,  247,  474,  474,  245,  474,  475,  475,  240,
      475,  237,  475,  475,  475,  475,  475,  475,  475,  475,
      476,  236,  476,  476,  235,  476,  477,  231,  229,  224,
      223,  477,  218,  477,  477,  477,  477,  477,  477,  478,
      217,  216,  478,  213,  211,  208,  193,  478,  478,  192,
      478,  479,  479,  191,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  480,  480,  190,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  481,  188,  481,
      481,  187,  481,  482,  482,  184,  482,  482,  183,  482,
      483,  180,  174,  168,  165,  483,  483,  483,  483,  483,

      483,  483,  483,  484,  164,  163,  162,  160,  484,  484,
      155,  484,  485,  485,  135,  485,  133,  485,  485,  485,
      485,  485,  485,  485,  485,  486,  486,  131,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  487,  128,
      487,  487,  126,  487,  488,  125,  488,  488,  121,  488,
      489,  489,  120,  116,  489,  489,  489,  489,  489,  489,
      489,  113,  489,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  491,  491,  106,  104,
      491,  491,  491,  491,  491,  491,  491,  103,  491,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  493,  493,  493,  102,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  494,   96,   92,   86,   81,
      494,  494,   80,  494,  494,   79,  494,  495,   74,   71,
       70,  495,   69,  495,   60,  495,  495,   59,  495,  496,
       58,   57,   55,   54,  496,  496,   53,  496,  496,   52,
      496,  497,  497,   51,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  498,  498,  498,  498,   47,  498,
      498,  498,  498,  498,  498,  498,  498,  499,   32,   31,
        8,    7,    2,  499,  499,  499,  499,    1,  499,  500,
      500,  500,  500,  500,  500,  500,  500,    0,  500,  500,

      500,  500,  501,  501,    0,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  502,  502,  502,  502,    0,
      502,  502,  502,  502,  502,  502,  502,  502,  503,  503,
        0,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  504,    0,    0,    0,    0,    0,  504,    0,  504,
      504,    0,  504,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  506,    0,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  507,
        0,  507,  507,    0,  507,  508,  508,    0,  508,  509,
      509,    0,  509,  509,    0,  509,  510,    0,    0,    0,

        0,  510,  510,  510,  510,  510,  510,  510,  510,  511,
        0,    0,    0,    0,    0,  511,    0,  511,  511,    0,
      511,  512,  512,    0,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  513,  513,    0,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  514,    0,  514,
      515,    0,  515,  515,    0,  515,  516,    0,  516,  516,
        0,  516,  517,  517,    0,    0,  517,  517,  517,  517,
      517,  517,  517,    0,  517,  518,  518,    0,    0,  518,
      518,  518,  518,  518,  518,  518,    0,  518,  519,    0,
        0,    0,    0,    0,    0,    0,  519,  519,    0,  519,

      520,    0,    0,    0,    0,  520,  520,    0,  520,  520,
        0,  520,  521,    0,    0,    0,  521,    0,  521,    0,
      521,  521,    0,  521,  522,    0,    0,    0,    0,    0,
        0,    0,  522,  522,    0,  522,  523,    0,    0,    0,
        0,  523,  523,    0,  523,  523,    0,  523,  524,  524,
        0,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  525,    0,  525,  525,    0,  525,  526,  526,    0,
      526,  526,    0,  526,  527,  527,  527,  527,    0,  527,
      527,  527,  527,  527,  527,  527,  527,  528,    0,    0,
        0,    0,  528,  528,    0,  528,  528,    0,  528,  529,

        0,    0,    0,    0,  529,  529,    0,  529,  529,    0,
      529,  530,  530,    0,  530,  531,    0,    0,    0,    0,
        0,  531,  531,  531,  531,    0,  531,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453
    } ;

extern int pyscannerYY_flex_debug;
int pyscannerYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscannerYYtext;
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pycode.h"
#include "arguments.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1

/* -----------------------------------------------------------------
 *
 *	statics
 */

  
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		bodyEntry    = 0 ;
static int		yyLineNr     = 1 ;
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QGString *       g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QDict<QCString>  g_packageNameCache(257);
static QCString         g_packageScope;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool             g_insideConstructor;

static QCString         g_moduleScope;
static QCString         g_packageName;

//static bool             g_hideClassDocs;

static QCString         g_defVal;
static int              g_braceCount;

static bool             g_lexInit = FALSE;
static bool             g_packageCommentAllowed;

//-----------------------------------------------------------------------------


static void initParser()
{
  protection = Public;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  previous = 0;
  g_packageCommentAllowed = TRUE;
  g_packageNameCache.setAutoDelete(TRUE);
}

static void initEntry()
{
  //current->python = TRUE;
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = SrcLangExt_Python; 
  current->setParent(current_root);
  initGroupInfo(current);
  gstat = FALSE;
}

static void newEntry()
{
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry ;
  initEntry();
}

static void newVariable()
{
  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
  {
    current->protection=Private;
  }
  if (current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    current->stat = TRUE;
  }
  newEntry();
}

static void newFunction()
{
  if (current->name.left(2)=="__" && current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current->protection=Public;
  }
  else if (current->name.at(0)=='_')
  {
    current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(const QCString &path)
{
  QCString *pScope = g_packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      g_packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
}

//-----------------------------------------------------------------------------

static void lineCount()
{
  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
  for (const char *p = pyscannerYYtext; *p; ++p)
  {
    yyLineNr += (*p == '\n') ;
  }
}

static void incLineNr()
{
  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
  yyLineNr++;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry* current )
{
    uint tl=current->type.length();
    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}
#endif
//-----------------------------------------------------------------

//-----------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QCString &doc,bool brief)
{
  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
  //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);

  // TODO: Fix me
  docBlockInBody=FALSE;
  
  if (docBlockInBody && previous && !previous->doc.isEmpty())
  {
    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  int lineNr = brief ? current->briefLine : current->docLine;
  while (parseCommentBlock(
	g_thisParser,
	(docBlockInBody && previous) ? previous : current,
	doc,     // text
	yyFileName, // file
	lineNr,
	docBlockInBody ? FALSE : brief, 
    docBlockJavaStyle, // javadoc style // or FALSE,
	docBlockInBody,
	protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry();
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

}

static void endOfDef(int correction=0)
{
  //printf("endOfDef at=%d\n",yyLineNr);
  if (bodyEntry)
  {
    bodyEntry->endBodyLine  = yyLineNr-correction;
    bodyEntry = 0;
  }
  newEntry();
  //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
  if (g_copyString) (*g_copyString)+=s;
}

static void initTriDoubleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscannerYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = TRUE;
  startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscannerYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = FALSE;
  startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBrief = TRUE;
  docBlock.resize(0);
  startCommentBlock(TRUE);
}

static void searchFoundDef()
{
  current->fileName  = yyFileName;
  current->startLine = yyLineNr;
  current->bodyLine  = yyLineNr;
  current->section = Entry::FUNCTION_SEC;
  current->protection = protection = Public;
  current->lang = SrcLangExt_Python;
  current->virt = Normal;
  current->stat = gstat;
  current->mtype = mtype = Method;
  current->type.resize(0);
  current->name.resize(0);
  current->args.resize(0);
  current->argList->clear();
  g_packageCommentAllowed = FALSE;
  gstat=FALSE;
  //printf("searchFoundDef at=%d\n",yyLineNr);
}

static void searchFoundClass()
{
  current->section = Entry::CLASS_SEC;
  current->argList->clear();
  current->type += "class" ;
  current->fileName  = yyFileName;
  current->startLine  = yyLineNr;
  current->bodyLine  = yyLineNr;
  g_packageCommentAllowed = FALSE;
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */




/* Class states */




/* Variable states */



/* String states */



/* import */



#line 1648 "<stdout>"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscannerYYlex_destroy (void );

int pyscannerYYget_debug (void );

void pyscannerYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pyscannerYYget_extra (void );

void pyscannerYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pyscannerYYget_in (void );

void pyscannerYYset_in  (FILE * in_str  );

FILE *pyscannerYYget_out (void );

void pyscannerYYset_out  (FILE * out_str  );

yy_size_t pyscannerYYget_leng (void );

char *pyscannerYYget_text (void );

int pyscannerYYget_lineno (void );

void pyscannerYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscannerYYwrap (void );
#else
extern int pyscannerYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( pyscannerYYtext, pyscannerYYleng, 1, pyscannerYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscannerYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscannerYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscannerYYin))==0 && ferror(pyscannerYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscannerYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscannerYYlex (void);

#define YY_DECL int pyscannerYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscannerYYtext and pyscannerYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscannerYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscannerYYtext[pyscannerYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 537 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1860 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pyscannerYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pyscannerYYin )
			pyscannerYYin = stdin;

		if ( ! pyscannerYYout )
			pyscannerYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscannerYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE );
		}

		pyscannerYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pyscannerYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 454 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1928 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 543 "pyscanner.l"
{ // start of a function/method definition with indent
      			  DBG_CTX((stderr,"Found def at %d\n",yyLineNr));
      			  g_indent=computeIndent(pyscannerYYtext);
			  searchFoundDef();
			  BEGIN( FunctionDec );
      			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 549 "pyscanner.l"
{ // start of a function/method definition
			  searchFoundDef();
			  BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 554 "pyscanner.l"
{ // start of a class definition with indent
       			  DBG_CTX((stderr,"Found class at %d\n",yyLineNr));
      			  g_indent=computeIndent(pyscannerYYtext);
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
       			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 560 "pyscanner.l"
{  // start of a class definition
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 565 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 565 "pyscanner.l"
{ // start of an from import
			  g_packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 571 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 571 "pyscanner.l"
{ // start of an import statement
			  g_packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 575 "pyscanner.l"
{ // property
      			current->section   = Entry::VARIABLE_SEC;
  			current->mtype     = Property;
			current->name      = QCString(pyscannerYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
       	              }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 585 "pyscanner.l"
{ // variable
      			g_indent=computeIndent(pyscannerYYtext);
      			current->section   = Entry::VARIABLE_SEC;
			current->name      = QCString(pyscannerYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 595 "pyscanner.l"
{ // start of a single quoted string
       		        g_stringContext=YY_START;
		        g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 601 "pyscanner.l"
{ // start of a double quoted string
       	                g_stringContext=YY_START;
			g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 607 "pyscanner.l"
{
       			gstat=TRUE;
      		      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 610 "pyscanner.l"
{ // normal comment 
			g_packageCommentAllowed = FALSE;
      		      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 613 "pyscanner.l"
{ // some other identifier
			g_packageCommentAllowed = FALSE;
		      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 616 "pyscanner.l"
{
      			g_curIndent=computeIndent(pyscannerYYtext);
                      }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 620 "pyscanner.l"
{ // new line
                        lineCount();
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 624 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 629 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 634 "pyscanner.l"
{  // start of a special comment
      			g_curIndent=computeIndent(pyscannerYYtext);
			g_packageCommentAllowed = FALSE;
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 640 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 22:
YY_RULE_SETUP
#line 648 "pyscanner.l"
{ // python3 style imports
                      }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 650 "pyscanner.l"
{ // from package import 
                        g_packageName=pyscannerYYtext;
		      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 653 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 656 "pyscanner.l"
{
                        incLineNr();
                        BEGIN(Search);
                      }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 660 "pyscanner.l"
{
		      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 662 "pyscanner.l"
{
                        unput(*pyscannerYYtext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 28:
YY_RULE_SETUP
#line 669 "pyscanner.l"
{ // import all
                  QCString item=g_packageName;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDIR_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
    		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 680 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscannerYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 690 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscannerYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
		}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 701 "pyscanner.l"
{
                  incLineNr();
                  BEGIN(Search);
                }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 705 "pyscanner.l"
{
		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 707 "pyscanner.l"
{ 
  		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 709 "pyscanner.l"
{
                  unput(*pyscannerYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 716 "pyscanner.l"
{
			current->name=removeRedundantWhiteSpace(substitute(pyscannerYYtext,".","::"));
			current->fileName = yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
			current->section=Entry::USINGDECL_SEC;
			current_root->addSubEntry(current);
			current = new Entry ;
			initEntry();
			BEGIN(Search);
                      }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 726 "pyscanner.l"
{
                  incLineNr();
                  BEGIN(Search);
                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 730 "pyscanner.l"
{
		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 732 "pyscanner.l"
{
                  unput(*pyscannerYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 739 "pyscanner.l"
{
                        DBG_CTX((stderr,"Found member variable %s in %s at %d\n",&pyscannerYYtext[5],current_root->name.data(),yyLineNr));
			current->name=&pyscannerYYtext[5];
			current->section=Entry::VARIABLE_SEC;
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			current->type.resize(0);
			if (current->name.at(0)=='_') // mark as private
			{
			  current->protection=Private;
			}
			else
			{
			  current->protection=Public;
			}
			newEntry();
                      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 757 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 762 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 42:
/* rule 42 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 767 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 771 "pyscanner.l"
{ // #
	              }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 773 "pyscanner.l"
{ // start of a single quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 778 "pyscanner.l"
{ // start of a double quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 783 "pyscanner.l"
{ incLineNr(); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 784 "pyscanner.l"
// identifiers
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 785 "pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 786 "pyscanner.l"
// anything else
	YY_BREAK


case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 790 "pyscanner.l"
{
                        DBG_CTX((stderr,"indent %d<=%d\n",computeIndent(&pyscannerYYtext[1]),g_indent));
                        if (computeIndent(&pyscannerYYtext[1])<=g_indent) 
			{
			  int i;
			  for (i=(int)pyscannerYYleng-1;i>=0;i--)
			  {
			    unput(pyscannerYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          incLineNr();
      		          current->program+=pyscannerYYtext;
			}
                      }
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 809 "pyscanner.l"
{
                        if (computeIndent(&pyscannerYYtext[1])<=g_indent)
			{
			  int i;
			  for (i=(int)pyscannerYYleng-1;i>=0;i--)
			  {
			    unput(pyscannerYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  incLineNr();
      		          current->program+=pyscannerYYtext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 827 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 831 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscannerYYtext;
      	              }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 834 "pyscanner.l"
{ // something at indent >0
      		        current->program+=pyscannerYYtext;
			g_curIndent = computeIndent(pyscannerYYtext);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the function
			{
			  endOfDef(1);
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 844 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 851 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 858 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscannerYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 862 "pyscanner.l"
{ // normal comment 
      		        current->program+=pyscannerYYtext;
      		      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 865 "pyscanner.l"
{ // comment half way
      		        current->program+=pyscannerYYtext;
                      }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 868 "pyscanner.l"
{ 
			incLineNr(); 
      		        current->program+=pyscannerYYtext;
		      }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 872 "pyscanner.l"
{ // any character
      		        current->program+=*pyscannerYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 877 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscannerYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 883 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscannerYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 889 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 64:
YY_RULE_SETUP
#line 898 "pyscanner.l"
{
			      //found function name
			      if (current->type.isEmpty()) 
			      {
				  current->type = "def";
			      }
			      current->name = pyscannerYYtext;
			      current->name = current->name.stripWhiteSpace();
			      newFunction();
                            }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 908 "pyscanner.l"
{ // function without arguments
			      g_specialBlock = TRUE; // expecting a docstring
			      bodyEntry = current;
                              current->bodyLine  = yyLineNr;
                              BEGIN( FunctionBody );
			    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 915 "pyscanner.l"
{
			       BEGIN( FunctionParams );
		            }
	YY_BREAK


case 67:
YY_RULE_SETUP
#line 921 "pyscanner.l"
{
                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 924 "pyscanner.l"
{ // Name of parameter
			  lineCount();
			  Argument *a = new Argument;
			  current->argList->append(a);
			  current->argList->getLast()->name = QCString(pyscannerYYtext).stripWhiteSpace();
			  current->argList->getLast()->type = "";
                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 931 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
      			  QCString defVal=&pyscannerYYtext[1];
			  g_defVal.resize(0);
			  g_braceCount=0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 940 "pyscanner.l"
{ // end of parameter list
                        }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 943 "pyscanner.l"
{
			  g_specialBlock = TRUE; // expecting a docstring
			  bodyEntry = current;
                          current->bodyLine  = yyLineNr;
                          BEGIN( FunctionBody );
                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 949 "pyscanner.l"
{ // a comment
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 951 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 74:
YY_RULE_SETUP
#line 957 "pyscanner.l"
{ // internal opening brace
       			  g_braceCount++;
			  g_defVal+=*pyscannerYYtext;
       			}
	YY_BREAK
case 75:
#line 962 "pyscanner.l"
case 76:
YY_RULE_SETUP
#line 962 "pyscanner.l"
{
       			  if (g_braceCount==0)  // end of default argument
			  {
			    if (current->argList->getLast())
			    {
			      current->argList->getLast()->defval=g_defVal.stripWhiteSpace();
			    }
       			    BEGIN(FunctionParams);
			  }
			  else // continue
			  {
			    g_braceCount--;
			    g_defVal+=*pyscannerYYtext;
			  }
       			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 977 "pyscanner.l"
{
			    g_defVal+=*pyscannerYYtext;
       			}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 980 "pyscanner.l"
{
       			    g_defVal+=*pyscannerYYtext;
			    incLineNr();
       			}
	YY_BREAK


case 79:
/* rule 79 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 988 "pyscanner.l"
{ // new def at indent 0
                        incLineNr();
			endOfDef();
			//g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 995 "pyscanner.l"
{  // start of a special comment at indent 0
                        incLineNr();
			endOfDef();
			//g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 81:
/* rule 81 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 1002 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscannerYYtext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 1005 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1009 "pyscanner.l"
{ // something at indent >0
                        g_curIndent=computeIndent(pyscannerYYtext);
			DBG_CTX((stderr,"g_curIndent=%d g_indent=%d\n",g_curIndent,g_indent));
                        if (g_curIndent<=g_indent) 
			  // jumped out of the class/method
			{
			  endOfDef(1);
			  g_indent=g_curIndent;
			  // make sure the next rule matches ^...
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  //g_hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          current->program+=pyscannerYYtext;
			}
      		      }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1027 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=*pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1034 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=*pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1041 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscannerYYtext;
		        g_specialBlock = FALSE; 
			//g_hideClassDocs = FALSE;
                      }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1046 "pyscanner.l"
{ 
      		        current->program+=*pyscannerYYtext;
			incLineNr(); 
		      }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1050 "pyscanner.l"
{ // normal comment
      		        current->program+=pyscannerYYtext;
                      }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1053 "pyscanner.l"
{ // any character
		        g_specialBlock = FALSE; 
      		        current->program+=*pyscannerYYtext;
                      }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1057 "pyscanner.l"
{ // start of a comment block
      		        //if (!g_hideClassDocs) 
			current->program+=pyscannerYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1064 "pyscanner.l"
{ // start of a comment block
      		        //if (!g_hideClassDocs) 
			current->program+=pyscannerYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 91:
YY_RULE_SETUP
#line 1072 "pyscanner.l"
{
			  if (current->type.isEmpty()) 
			  {
			      current->type = "class";
			  }

			  current->section = Entry::CLASS_SEC;
			  current->name = pyscannerYYtext;

			  // prepend scope in case of nested classes
			  if (current_root->section&Entry::SCOPE_MASK)
			  {
			    //printf("*** Prepending scope %s to class %s\n",current_root->name.data(),current->name.data());
			    current->name.prepend(current_root->name+"::");
			  }
			  
			  current->name = current->name.stripWhiteSpace();
			  current->fileName = yyFileName;        
			  docBlockContext   = YY_START;
			  docBlockInBody    = FALSE;
			  docBlockJavaStyle = FALSE;
			  docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 92:
YY_RULE_SETUP
#line 1099 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1102 "pyscanner.l"
{ // begin of the class definition
			 g_specialBlock = TRUE; // expecting a docstring
                         current->bodyLine  = yyLineNr;
			 current->program.resize(0);
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1109 "pyscanner.l"
{
                         current->extends->append(
					      new BaseInfo(substitute(pyscannerYYtext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK


case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1119 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount();
      				 current->program+=pyscannerYYtext;
                               }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1125 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock();
      				 current->program+=pyscannerYYtext;
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1131 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock();
      				 current->program+=pyscannerYYtext;
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1137 "pyscanner.l"
{
      				 current->program+=pyscannerYYtext;
			         //current->startLine = yyLineNr;
				 g_curIndent=computeIndent(pyscannerYYtext);
				 bodyEntry = current;
				 DBG_CTX((stderr,"setting indent %d\n",g_curIndent));
				 //printf("current->program=[%s]\n",current->program.data());
				 //g_hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1148 "pyscanner.l"
{
				 
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry();
      				 current->program+=pyscannerYYtext;

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 100:
YY_RULE_SETUP
#line 1162 "pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyLineNr);
			current->initializer = pyscannerYYtext;
			current->initializer += " ";
                      }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1167 "pyscanner.l"
{ // spaces
	              }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1169 "pyscanner.l"
{ // integer value
			current->type = "int";
			current->initializer += pyscannerYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1174 "pyscanner.l"
{ // floating point value
			current->type = "float";
			current->initializer += pyscannerYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1179 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1186 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1193 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_doubleQuote=TRUE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1202 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_doubleQuote=FALSE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1210 "pyscanner.l"
{ // tuple
                        if (current->mtype!=Property)
			{
			  current->type = "tuple";
			}
      		        current->initializer+=*pyscannerYYtext;
                        g_atomStart='(';
			g_atomEnd=')';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1221 "pyscanner.l"
{ // list
			current->type = "list";
      		        current->initializer+=*pyscannerYYtext;
                        g_atomStart='[';
			g_atomEnd=']';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1229 "pyscanner.l"
{ // dictionary
			current->type = "dictionary";
      		        current->initializer+=*pyscannerYYtext;
                        g_atomStart='{';
			g_atomEnd='}';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1237 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1240 "pyscanner.l"
{
      		        current->initializer+=pyscannerYYtext;
	              }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1243 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                      }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1246 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 115:
YY_RULE_SETUP
#line 1253 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                        if (g_atomStart==*pyscannerYYtext)
			{
			  g_atomCount++;
			}
                      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1260 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                        if (g_atomEnd==*pyscannerYYtext)
			{
			  g_atomCount--;
			}
			if (g_atomCount==0)
			{
			  BEGIN(VariableEnd);
			}
                      }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1271 "pyscanner.l"
{
       			g_stringContext=YY_START;
			current->initializer+="\"";
			g_copyString=&current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1277 "pyscanner.l"
{
      		        current->initializer+=pyscannerYYtext;
	              }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1280 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                      }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1283 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
     			incLineNr();
     		      }
	YY_BREAK


case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 1291 "pyscanner.l"
{
                        incLineNr();
			newVariable();
                        BEGIN(Search);
                      }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1296 "pyscanner.l"
{ 
                        unput(*pyscannerYYtext);
			newVariable();
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1301 "pyscanner.l"
{ yyterminate();
                        newEntry();
                      }
	YY_BREAK


case 123:
#line 1308 "pyscanner.l"
case 124:
YY_RULE_SETUP
#line 1308 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscannerYYtext[0]=='"')) 
			  {
			    if (g_specialBlock) // expecting a docstring
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    else if (g_packageCommentAllowed) // expecting module docs
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    if ((docBlockContext==ClassBody /*&& !g_hideClassDocs*/) ||
				docBlockContext==FunctionBody)
			    {
			      current->program+=docBlock;
			      current->program+=pyscannerYYtext;
			    }
                            //if (g_hideClassDocs)
			    //{
                            //  current->startLine = yyLineNr;
			    //}
			    //g_hideClassDocs=FALSE;
			    BEGIN(docBlockContext);
			  }
                          else 
			  {
                            docBlock += pyscannerYYtext;
                          }
			  g_packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1355 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(pyscannerYYtext);
			  if (indent>=g_curIndent)
			  { // strip g_curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-g_curIndent;i++) docBlock+=' ';
			    DBG_CTX((stderr,"stripping indent %d\n",g_curIndent));
			  }
			  else
			  {
			    DBG_CTX((stderr,"not stripping: %d<%d\n",indent,g_curIndent));
			    docBlock += pyscannerYYtext;
			  }
      			}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1369 "pyscanner.l"
{
			  docBlock += pyscannerYYtext;
                        }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1372 "pyscanner.l"
{
      			  incLineNr();
			  docBlock += pyscannerYYtext;
      			}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1376 "pyscanner.l"
{
			  docBlock += pyscannerYYtext;
      			}
	YY_BREAK


case 129:
YY_RULE_SETUP
#line 1382 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 130:
/* rule 130 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 1384 "pyscanner.l"
{ // continuation of the comment on the next line
      			  docBlock+='\n';
			  docBrief = FALSE;
                          startCommentBlock(FALSE);
			  incLineNr();
      			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1390 "pyscanner.l"
{ // any other stuff
      			  docBlock+=pyscannerYYtext;
      			}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1393 "pyscanner.l"
{ // new line that ends the comment
			  handleCommentBlock(docBlock, docBrief);
      			  incLineNr();
			  BEGIN(docBlockContext);
      			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1398 "pyscanner.l"
{ // anything we missed
      			  docBlock+=*pyscannerYYtext;
      			}
	YY_BREAK


case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1404 "pyscanner.l"
{ // line continuation
      			         addToString(pyscannerYYtext);
      				 incLineNr();
                               }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1408 "pyscanner.l"
{ // espaced char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1411 "pyscanner.l"
{ // tripple double quotes
      			         addToString(pyscannerYYtext);
      			       }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1414 "pyscanner.l"
{ // end of the string
      			         addToString(pyscannerYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1418 "pyscanner.l"
{ // normal chars
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1421 "pyscanner.l"
{ // normal char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK


case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1427 "pyscanner.l"
{ // line continuation
      			         addToString(pyscannerYYtext);
      				 incLineNr();
                               }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1431 "pyscanner.l"
{ // espaced char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1434 "pyscanner.l"
{ // tripple single quotes
      			         addToString(pyscannerYYtext);
      			       }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1437 "pyscanner.l"
{ // end of the string
      			         addToString(pyscannerYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1441 "pyscanner.l"
{ // normal chars
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1444 "pyscanner.l"
{ // normal char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK


case 146:
#line 1451 "pyscanner.l"
case 147:
YY_RULE_SETUP
#line 1451 "pyscanner.l"
{
                          *g_copyString += pyscannerYYtext;
			  if (g_doubleQuote==(pyscannerYYtext[0]=='"')) 
			  {
			    BEGIN(g_stringContext);
			  }
                        }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1460 "pyscanner.l"
{
			  lineCount();
                          *g_copyString += pyscannerYYtext;
                        }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1464 "pyscanner.l"
{
      			  incLineNr();
                          *g_copyString += pyscannerYYtext;
      			}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1468 "pyscanner.l"
{
                          *g_copyString += *pyscannerYYtext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscannerYYtext, YY_START, yyLineNr);

                               }
  */
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1483 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyLineNr);

                                 lineCount();
                               }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1490 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscannerYYtext, YY_START, yyLineNr);

                               }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1497 "pyscanner.l"
ECHO;
	YY_BREAK
#line 3533 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pyscannerYYin at a new source and called
			 * pyscannerYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscannerYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pyscannerYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pyscannerYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscannerYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscannerYYrestart(pyscannerYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscannerYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 454 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 454 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 453);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pyscannerYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscannerYYrestart(pyscannerYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscannerYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pyscannerYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscannerYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pyscannerYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE );
	}

	pyscannerYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pyscannerYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pyscannerYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscannerYYpop_buffer_state();
	 *		pyscannerYYpush_buffer_state(new_buffer);
     */
	pyscannerYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscannerYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscannerYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscannerYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pyscannerYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pyscannerYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscannerYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscannerYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscannerYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscannerYY_create_buffer()
 * 
 */
    void pyscannerYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscannerYYfree((void *) b->yy_ch_buf  );

	pyscannerYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscannerYYrestart() or at EOF.
 */
    static void pyscannerYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pyscannerYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscannerYY_init_buffer was _probably_
     * called from pyscannerYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pyscannerYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscannerYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pyscannerYYensure_buffer_stack();

	/* This block is copied from pyscannerYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscannerYY_switch_to_buffer. */
	pyscannerYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pyscannerYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pyscannerYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pyscannerYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscannerYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscannerYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscannerYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscannerYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscannerYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscannerYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char * yystr )
{
    
	return pyscannerYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscannerYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscannerYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscannerYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscannerYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscannerYYtext[pyscannerYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscannerYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscannerYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pyscannerYYget_lineno  (void)
{
        
    return pyscannerYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pyscannerYYget_in  (void)
{
        return pyscannerYYin;
}

/** Get the output stream.
 * 
 */
FILE *pyscannerYYget_out  (void)
{
        return pyscannerYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pyscannerYYget_leng  (void)
{
        return pyscannerYYleng;
}

/** Get the current token.
 * 
 */

char *pyscannerYYget_text  (void)
{
        return pyscannerYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pyscannerYYset_lineno (int  line_number )
{
    
    pyscannerYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pyscannerYY_switch_to_buffer
 */
void pyscannerYYset_in (FILE *  in_str )
{
        pyscannerYYin = in_str ;
}

void pyscannerYYset_out (FILE *  out_str )
{
        pyscannerYYout = out_str ;
}

int pyscannerYYget_debug  (void)
{
        return pyscannerYY_flex_debug;
}

void pyscannerYYset_debug (int  bdebug )
{
        pyscannerYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscannerYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pyscannerYYin = stdin;
    pyscannerYYout = stdout;
#else
    pyscannerYYin = (FILE *) 0;
    pyscannerYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscannerYYlex_init()
     */
    return 0;
}

/* pyscannerYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscannerYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscannerYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscannerYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pyscannerYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pyscannerYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscannerYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscannerYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pyscannerYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscannerYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pyscannerYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1497 "pyscanner.l"



//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      inputString = ce->program;
      inputPosition = 0;
      pyscannerYYrestart( pyscannerYYin ) ;
      if (ce->section&Entry::COMPOUND_MASK)
      {
        current_root = ce ;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        current_root = ce->parent();
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyFileName = ce->fileName;
      yyLineNr   = ce->bodyLine ;
      if (current) delete current;
      current = new Entry;
      initEntry();

      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      pyscannerYYlex() ;
      g_lexInit=TRUE;
      delete current; current=0;
      ce->program.resize(0);

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);

    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  inputString = fileBuf;
  inputPosition = 0;

  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  g_specialBlock = FALSE;


  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    //setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    QFileInfo fi(fileName);
    g_moduleScope = findPackageScope(fileName);
    QCString baseName=fi.baseName().utf8();
    if (baseName!="__init__") // package initializer file is not a package itself
    {
      if (!g_moduleScope.isEmpty())
      {
	g_moduleScope+="::";
      }
      g_moduleScope+=baseName;
    }

    current            = new Entry;
    initEntry();
    current->name      = g_moduleScope;
    current->section   = Entry::NAMESPACE_SEC;
    current->type      = "namespace";
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    current->bodyLine  = yyLineNr;

    rt->addSubEntry(current);

    current_root  = current ;
    initParser();
    current       = new Entry;

    groupEnterFile(yyFileName,yyLineNr);
    
    current->reset();
    initEntry();
    pyscannerYYrestart( pyscannerYYin );
    BEGIN( Search );
    pyscannerYYlex();
    g_lexInit=TRUE;

    groupLeaveFile(yyFileName,yyLineNr);

    current_root->program.resize(0);
    delete current; current=0;

    parseCompounds(current_root);

    inputFile.close();
  }
  
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  g_specialBlock = FALSE;
  g_packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscannerYY_switch_to_buffer(pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  pyscannerYYrestart( pyscannerYYin );

  BEGIN( FunctionDec );

  pyscannerYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscannerYY_switch_to_buffer(orgState);
  pyscannerYY_delete_buffer(tmpBuf);

  inputString = orgInputString; 
  inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

void pyscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    pyscannerYYlex_destroy();
  }
#endif
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,
                                       const char *fileBuf,
                                       Entry *root,
                                       bool /*sameTranslationUnit*/,
                                       QStrList & /*filesInSameTranslationUnit*/)
{
  g_thisParser = this;
  printlex(pyscannerYY_flex_debug, TRUE, __FILE__, fileName);
  ::parseMain(fileName,fileBuf,root);
  printlex(pyscannerYY_flex_debug, FALSE, __FILE__, fileName);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QCString &)
{
  return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    SrcLangExt /*lang*/,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef,
    bool showLineNumbers,
    Definition *searchCtx,
    bool collectXRefs
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef,
                    showLineNumbers,searchCtx,collectXRefs);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void pyscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


