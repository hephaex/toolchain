
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 204
#define YY_END_OF_BUFFER 205
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[812] =
    {   0,
       79,   79,  123,  123,  136,  136,  151,  151,  195,  195,
      142,  142,  205,  204,   46,  204,   46,  204,   45,  204,
       46,  204,   46,  204,   46,  204,   46,  204,   44,   46,
      204,   46,  204,   46,  204,   27,   46,  204,   46,  204,
       46,  204,   46,  204,   46,  204,   46,  204,   44,   46,
      204,   46,  204,   46,  204,   92,  204,   91,  204,   92,
      204,   89,   92,  204,   92,  204,   92,  204,  204,   93,
      204,  113,  204,  112,  204,  113,  204,  110,  113,  204,
      113,  204,   74,  204,   74,  204,   73,  204,   74,  204,
       74,  204,   74,  204,   70,   74,  204,   74,  204,   74,

      204,   78,  204,   77,  204,   78,  204,   75,   78,  204,
       78,  204,   78,  204,   78,  204,   82,  204,   81,  204,
       79,   82,  204,   79,   82,  204,   82,  204,   79,   82,
      204,   79,   82,  204,   82,  204,   74,  204,   73,  204,
       74,  204,   74,  204,   74,  204,   74,  204,   74,  204,
      101,  204,  100,  204,   98,  101,  204,  101,  204,  105,
      204,  104,  204,  105,  204,  105,  204,  109,  204,  108,
      204,  109,  204,  109,  204,   97,  204,   94,  204,   97,
      204,   95,   97,  204,   97,  204,   97,  204,   60,  204,
       59,  204,   60,  204,   57,   60,  204,   60,  204,   64,

      204,   64,  204,   63,  204,   64,  204,   64,  204,   64,
      204,   61,   64,  204,   64,  204,   64,  204,   68,  204,
       67,  204,   68,  204,   65,   68,  204,   68,  204,   85,
      204,   83,  204,  204,   87,  204,   88,  204,  204,  119,
      204,  118,  204,  117,  119,  204,  119,  204,  123,  126,
      204,  120,  204,  123,  126,  204,  126,  204,  126,  204,
      128,  204,  127,  204,  204,  131,  204,  131,  204,  129,
      204,  131,  204,  131,  204,  136,  140,  204,  137,  204,
      140,  204,  140,  204,  140,  204,  140,  204,  140,  204,
      116,  204,  114,  204,  116,  204,  149,  204,  149,  204,

      147,  204,  141,  149,  204,  146,  149,  204,  149,  204,
      152,  204,  151,  152,  204,  150,  204,  152,  204,  159,
      160,  204,  158,  204,  160,  204,  160,  204,  160,  204,
      170,  171,  204,  161,  204,  171,  204,  171,  204,  171,
      204,  174,  204,  172,  204,  174,  204,  178,  204,  176,
      204,  175,  178,  204,  178,  204,  181,  184,  204,  179,
      204,  182,  184,  204,  183,  184,  204,  184,  204,  184,
      204,  187,  204,  185,  204,  187,  204,  190,  204,  189,
      204,  190,  204,  188,  190,  204,  190,  204,  193,  204,
      192,  204,  193,  204,  191,  193,  204,  193,  204,   54,

       56,  204,   55,  204,   56,  204,   56,  204,  134,  204,
      133,  204,  132,  134,  204,  134,  204,   49,   50,  204,
       48,  204,   50,  204,   50,  204,  195,  197,  204,  196,
      204,  197,  204,  197,  204,  197,  204,  200,  204,  199,
      204,  198,  200,  204,  200,  204,  202,  203,  204,  201,
      204,  203,  204,  142,  204,  142,  145,  204,  143,  204,
      144,  204,   43,    4,   36,   38,   40,   38,   26,   26,
       18,   26,   18,   18,   18,   18,   18,   18,   24,   25,
       20,   26,   27,   18,   18,   18,   18,   18,   18,   18,
       18,   30,   31,   36,   28,   89,   89,   90,   89,   93,

      110,  110,  111,   70,   70,   72,   70,   75,   75,   76,
       75,   79,   79,   79,   79,   79,   79,   80,   79,   98,
       99,  102,  103,  107,  106,  107,   95,   95,   96,   95,
       57,   57,   57,   58,   61,   61,   62,   61,   65,   65,
       66,   83,   84,   87,   86,  117,  123,  120,  123,  125,
      125,  122,  127,  130,  136,  139,  138,  115,  141,  146,
      148,  151,  150,  159,  170,  173,  175,  177,  181,  180,
      186,  188,  188,  191,  191,   54,  132,   49,  195,  194,
      198,  202,  142,   26,   37,   35,   42,   38,   42,   42,
       42,   38,   42,   42,   39,    7,   34,    1,    1,    2,

       18,   18,   18,   18,   22,   23,   18,   18,   18,   20,
        5,   18,   18,   18,   18,   18,   18,   18,   32,   35,
       29,   89,   89,   70,   75,   75,   79,   79,   79,   95,
       95,   57,   57,   57,   57,   61,   65,  124,   51,   52,
       53,   47,  194,   42,   42,   16,   33,    1,   19,    2,
     8198,   18,16390,   18,   18,   18,   18,   18,   18, 8198,
       18,16390,   18,   18,   18,   18,   18,   89,   69,   75,
       79,   79,   71,   95,   57,   57,   57,   65,  124,  154,
      162,   47,   15,   41,    7,   13, 8198, 8198,   18,   18,
       18,   21,   18,   18,    5, 8198,   18,   18,   18,   89,

       75,   79,   95,    3,   14,    8,   18,   18,   21,   18,
       18,   18,   18,   18,   89,   75,   79,   95,   83,  156,
      164,   18,   18,   18,   18,   18,   18,   18,   89,   75,
       79,   95,  155,  153,  163,   18,   18,   18,   18,   18,
       18,   18,   89,   91,  112,   73,   75,   77,   79,   81,
      100,  104,  108,   94,   95,   59,   63,   67,   85,   88,
      118,  121,  128,  129,  135,  137,  114,  147,  157,  158,
      161,  172,  176,  179,  185,  189,  192,  133,   48,  196,
      199,  201,   10,    9,   18,   18,   18,    5,   18,   18,
      165,   12,   11,   18,   18,   18,   18,   18,   18,  168,

       17,   18,   17,   18,  169,  166,   17,   18,  169,  167,
       43
    } ;

static yyconst flex_int16_t yy_accept[1174] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
       23,   25,   27,   29,   32,   34,   36,   39,   41,   43,

       45,   47,   49,   52,   54,   56,   58,   60,   62,   65,
       67,   69,   70,   72,   74,   76,   78,   81,   83,   85,
       87,   89,   91,   93,   95,   98,  100,  102,  104,  106,
      108,  111,  113,  115,  117,  119,  121,  124,  127,  129,
      132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  155,  158,  160,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  180,  182,  185,  187,  189,  191,  193,
      195,  198,  200,  202,  204,  206,  208,  210,  212,  215,
      217,  219,  221,  223,  225,  228,  230,  232,  234,  235,
      237,  239,  240,  242,  244,  247,  249,  252,  254,  257,

      259,  261,  263,  265,  266,  268,  270,  272,  274,  276,
      279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  306,  309,  311,  313,  316,  318,  320,
      323,  325,  327,  329,  331,  334,  336,  338,  340,  342,
      344,  346,  348,  350,  352,  355,  357,  360,  362,  365,
      368,  370,  372,  374,  376,  378,  380,  382,  384,  387,
      389,  391,  393,  395,  398,  400,  403,  405,  407,  409,
      411,  413,  416,  418,  421,  423,  425,  427,  430,  432,
      434,  436,  438,  440,  442,  445,  447,  450,  452,  454,
      456,  459,  461,  463,  463,  463,  463,  463,  464,  464,

      464,  465,  465,  465,  465,  465,  465,  466,  467,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  470,  470,  471,  472,  473,
      474,  475,  476,  477,  478,  479,  480,  481,  483,  484,
      485,  486,  487,  488,  489,  490,  491,  492,  492,  492,
      492,  492,  492,  492,  493,  494,  495,  495,  496,  496,
      496,  496,  496,  496,  497,  498,  498,  498,  498,  499,
      500,  500,  501,  502,  502,  503,  503,  503,  504,  504,
      504,  504,  504,  504,  505,  505,  505,  506,  506,  506,
      507,  507,  507,  507,  508,  508,  509,  510,  510,  510,

      510,  511,  512,  512,  513,  514,  514,  515,  516,  517,
      517,  517,  518,  518,  519,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  521,
      521,  522,  522,  522,  523,  523,  525,  525,  525,  526,
      526,  527,  527,  527,  528,  529,  529,  529,  529,  530,
      531,  532,  532,  532,  533,  533,  534,  534,  535,  535,
      535,  535,  535,  535,  536,  536,  536,  537,  537,  538,
      538,  538,  538,  539,  540,  540,  541,  541,  542,  542,
      543,  543,  543,  544,  544,  545,  545,  546,  546,  547,
      547,  548,  549,  550,  550,  551,  552,  552,  553,  553,

      554,  554,  554,  554,  554,  555,  555,  556,  557,  558,
      558,  558,  558,  559,  559,  559,  560,  561,  561,  562,
      562,  563,  564,  564,  564,  565,  565,  565,  565,  566,
      566,  566,  566,  566,  566,  566,  567,  567,  568,  568,
      569,  569,  570,  570,  571,  571,  571,  572,  572,  573,
      573,  574,  574,  574,  575,  575,  576,  576,  576,  577,
      577,  577,  578,  578,  579,  579,  579,  580,  581,  581,
      582,  582,  583,  583,  584,  585,  585,  585,  585,  585,
      586,  587,  588,  590,  591,  592,  594,  595,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  597,  597,  597,

      597,  597,  597,  598,  599,  600,  601,  602,  603,  604,
      605,  606,  607,  607,  608,  609,  610,  611,  612,  613,
      614,  615,  616,  617,  618,  619,  619,  619,  619,  619,
      620,  621,  621,  622,  623,  623,  624,  624,  624,  624,
      624,  624,  625,  626,  626,  627,  628,  628,  629,  629,
      630,  630,  630,  630,  630,  630,  630,  631,  631,  632,
      633,  634,  635,  636,  636,  636,  637,  637,  638,  638,
      638,  638,  638,  638,  638,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  640,  641,  642,  642,  642,  643,  643,  644,
      644,  644,  644,  644,  644,  644,  644,  645,  646,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  648,  649,  650,  651,  654,  655,  656,  656,  657,
      658,  659,  659,  660,  663,  664,  665,  666,  667,  668,
      668,  668,  668,  669,  669,  669,  670,  670,  670,  671,
      672,  672,  673,  674,  674,  674,  674,  675,  675,  676,
      677,  678,  678,  678,  679,  679,  679,  679,  679,  679,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  681,  681,  681,  681,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  683,  684,  684,  684,  685,  685,  685,
      685,  685,  685,  687,  687,  687,  687,  688,  690,  691,
      692,  693,  694,  695,  697,  698,  699,  700,  700,  701,
      701,  701,  702,  703,  703,  703,  703,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  705,  706,  706,  706,  706,  707,  707,

      707,  707,  707,  708,  709,  710,  711,  712,  713,  714,
      715,  716,  716,  716,  717,  718,  718,  718,  718,  719,
      719,  719,  719,  719,  719,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  723,  724,  725,
      726,  727,  728,  729,  730,  730,  730,  731,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  734,  735,  735,
      735,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  737,  738,  739,  740,  741,  742,  743,
      745,  746,  747,  749,  751,  752,  753,  754,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  765,  766,
      766,  766,  766,  766,  766,  766,  766,  767,  768,  769,
      770,  771,  771,  771,  771,  771,  771,  772,  773,  774,
      775,  776,  777,  778,  779,  780,  781,  782,  783,  783,

      783,  784,  785,  786,  787,  788,  789,  790,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  792,
      792,  792,  793,  794,  795,  796,  796,  797,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  799,  799,  800,  800,  800,  800,  800,  800,  800,
      801,  801,  801,  803,  803,  805,  805,  805,  806,  807,
      807,  809,  809,  809,  810,  810,  810,  810,  810,  810,
      811,  812,  812
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   32,   38,   39,
       32,   40,   32,   41,   42,   32,   32,   32,   32,   32,
       43,   44,   45,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   32,   56,   57,   58,   59,
       60,   61,   32,   62,   63,   64,   65,   66,   67,   68,
       69,   32,   70,   71,   72,   73,    1,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,    1,   24,    1,   25,   23,   23,   23,   23,
       23,   23,   23,   23,   26,   23,   23,   23,   27,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   28,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1402] =
    {   0,
        0,    0,    0,   73,  144,  217, 5190, 5189,  290,    0,
      364,    0,  438,  511,  584,  657,  730,    0,  804,    0,
       73,   74,   76,   79,  878,  951, 1024,    0, 1098,    0,
     1172,    0, 1246,    0,   86,   89, 1320,    0,   90,   95,
     1394,    0,  108,  122,  156,  229,   82,   94, 1468, 1542,
      169,  181,   96,  202,  242,  450,   99,  111, 1616,    0,
      241,  446,  129,  132, 1690,    0, 1764,    0,  443,  462,
      463,  475, 1838,    0,  162,  193,  519,  523, 1912,    0,
      133,  134,  178,  182, 5191, 9784, 9784,  526,  206, 5177,
     5174, 5151,  248,  525, 1981, 2039,  453, 2105, 2177,  103,

      542,  608,  681,  257,  475, 9784, 9784, 5168,  240,  555,
      922, 5171, 9784, 9784, 9784,    0,   89,  555, 9784,  615,
      619,  908, 1496, 5150,  685,  559,  267, 9784, 9784, 5165,
      621,  628, 5146, 1557, 9784, 9784, 2248,  964, 1565, 1983,
     9784, 2050,  975,  997, 1989, 2075, 5117, 1504,  708, 9784,
     9784,    0,  647, 9784, 9784, 5129,  913, 9784, 9784, 5128,
      927, 9784, 9784, 5127,  967, 1555, 2115, 9784, 9784,    0,
     2123, 1483, 9784, 2162, 2184, 2206, 2214, 5110, 2223, 1518,
      717, 9784, 9784,    0, 5111, 1531, 9784, 5109, 1994,    0,
     9784, 2056, 9784, 9784,    0, 5080,  488, 9784, 5081, 2272,

     2137, 9784,    0, 5078, 9784,  196, 9784, 5116, 5076,    0,
     9784, 9784, 5102, 5106, 5068,  146, 9784, 9784, 2228, 9784,
      491, 9784, 9784,  893, 2240, 9784,  609, 9784, 5072,    0,
     9784, 9784,  409,  449,    0, 9784, 9784,  883, 1543, 9784,
     9784, 2297, 9784, 9784,    0, 2301,    0, 9784, 9784, 9784,
     9784, 2305, 9784, 9784, 2309, 9784, 9784,    0,  181, 5071,
     9784, 9784,    0,  234, 5070,    0, 9784, 5063, 5062, 9784,
     9784,    0, 5066,    0, 9784, 5094, 5059,    0, 9784, 9784,
     5031,  166, 9784, 9784,    0, 5057,    0, 9784, 5056,    0,
        0, 9784, 9784, 2080, 2348, 2414, 2023, 2169, 5052, 5089,

     9784,    0, 5072, 5065,    0,  126,  176, 9784, 9784, 2487,
     5063,  548, 5071,  653,   46,  448,  922,  522,  535, 2321,
      548,  579, 5036, 5021, 9784, 5068,  622, 2560, 5011, 5018,
     5031, 5022,  634,  488, 5018, 9784, 9784,    0,  992,  884,
     2103, 1526, 2233, 2027, 2320, 2234, 2322, 2632,  574, 2242,
      904,  915, 2337,  630, 2348, 2384, 1001, 9784, 2012, 2310,
     2365, 2374, 5066, 9784, 2118, 1990, 2178, 1014, 9784, 2386,
     5069, 9784,  554, 5062,  700, 5044, 1590, 9784, 5008, 2409,
     2444, 5041, 2467, 2518, 2524, 2570, 2578, 2391, 1605, 9784,
     5006, 2541, 2603, 5037, 5053, 9784, 2362, 2051, 2410, 2332,

     9784, 2533, 5051,  257, 2703, 2776, 5050, 9784, 2591, 2053,
     2604, 5049, 2432, 9784, 2638, 2662, 2666, 5032, 2688, 2731,
     2615, 2761, 2800,    0, 2804, 2748, 2826, 1513,    0, 2439,
     9784, 4997, 5046, 9784, 2454, 9784, 4995, 5043, 9784, 2458,
     9784, 4992, 5036, 9784, 2654, 2445, 2749, 2472, 9784, 2814,
     2852, 2636,    0, 2860, 5019, 2882, 2476, 9784, 4984, 2874,
     2891, 5017, 2908, 2916, 2836, 2920, 2942, 2513, 9784, 4979,
     2946, 2954,    0, 5016, 5024, 5014, 2532, 9784, 4972, 5008,
     4971, 2561, 9784, 4967,    0, 2589, 9784, 4966,    0, 4962,
     2149, 9784, 4940, 4937, 9784, 4973, 2623, 9784, 4924,    0,

     4917, 1530, 4966, 4960, 9784, 4908,    0, 9784, 9784, 4905,
     4906, 2676, 9784, 4905, 2718, 9784, 2757, 2697, 9784, 4904,
     2753, 9784, 4884, 4868,    0,  192, 4863, 4857,    0, 4854,
     4860, 4863,  215, 4852, 2735, 9784, 4851,    0, 2739, 9784,
     4850,    0, 2808, 9784, 4849, 2812, 9784, 4842,  881, 4887,
      896, 4872, 4837,  924, 4883,  974, 4866, 4828,    0, 4866,
      596,    0, 4817,    0,  461, 4816,    0,    0, 4815,    0,
     4813,    0, 4812,    0, 4816, 4810, 4843,    0, 4838,  643,
     4829, 9784, 9784, 4828, 2993, 4826, 4829, 9784, 4825,   79,
     4788, 4773,  576, 1577,  652, 2373, 9784,  102,  869, 1462,

     4779, 4777, 4815,  986, 2928,    0, 1595, 2598, 2049, 2016,
     9784, 9784,    0, 2339, 2681, 2099,    0,    0, 2930, 2970,
     2971, 2977, 2978, 2984, 2982, 3037, 2347, 2948, 3045, 9784,
     3053, 3069, 2478, 3034, 3062, 3065,    0, 4774, 3092, 3096,
     4773, 4803, 3084, 3092, 3095,  699, 3150, 3123, 3158, 3173,
     4813, 2848, 2896, 4767, 4765, 4764, 3114, 3126, 3181, 3209,
     3235, 3243, 3251, 4763, 4762,    0,    0, 4795, 4754, 4744,
     4721, 3917, 3916,    0,    0, 3912, 3908, 3906, 3906, 3899,
     3896, 3889, 3887, 3875, 3883, 3869, 3860, 3847, 2986, 3833,
     3841, 3836, 3828, 3822, 3821, 3820, 3814,    0, 3813,    0,

     3812, 9784, 9784, 9784, 3808, 3824, 2727, 3788,    0, 3782,
     3767, 3756, 2225, 3738, 3783,    0, 3171, 2865, 9784, 1466,
     3725, 3720, 1473, 3752, 3044, 1977, 3180, 2003, 3729, 3714,
     9784, 2990, 9784,    0, 3274, 3085, 3117, 3696, 3185, 3201,
     3205, 3714, 3347, 3406, 3390, 3349, 3392, 3394, 3396, 3362,
     3366, 3440, 3343, 3691, 3353, 9784, 3456, 3665, 3446, 3511,
     3584, 3478, 9784, 3661, 3646, 3645, 3449,    0, 3537, 3610,
     3564, 3644, 3640, 3679, 3631, 3630, 3627, 3593, 3582,    0,
     3578, 3577, 3566, 3585, 3562, 3551, 3547, 3546, 3529, 3523,
     9784, 3504, 3504, 3497, 9784, 3487, 3496, 3468, 3463, 3455,

     3451, 3441, 3429, 3424, 3416, 3403, 3396, 3121, 3394, 3388,
     3387, 3380, 3376, 9784, 3385, 3469, 9784, 3365, 3341, 3328,
     3348, 3375, 9784, 2068, 3320, 3329,    0, 3129, 3468, 3439,
     3304, 3214, 3487, 3657, 3548, 3489, 3643, 3621, 3526, 3319,
     3308, 3666, 3688, 3217, 3200, 3199, 3696, 3732, 3192, 3191,
     3190, 3178, 3183, 3182, 3175, 3164, 3158, 3157, 3141, 3119,
     3114, 3124, 1942, 3097, 3084, 3095, 3092, 3078, 3076, 3074,
     3057, 3053, 3040, 3042, 1437, 3027, 3036, 3027,  434, 3026,
     3024, 3022, 3010, 3008, 3000, 2993, 2992, 2984, 2980, 2979,
     2978, 2974, 3006, 9784, 2958, 2966, 3570, 9784, 2971, 3615,

     2934, 2916, 3502, 3497, 9784, 3644, 3574, 3689, 3707, 3716,
     3725, 2929, 2919, 3738, 3756, 2914, 2913, 2906, 3747, 3785,
     3794, 2905, 2904, 2894, 9784, 2893, 2892, 2888, 2880, 2879,
     2868, 2865,  844, 2849, 2842, 2840, 2841, 2837, 2826, 2818,
     2809, 2811, 2804, 2803, 2796, 9784, 2791,    0,    0, 2794,
     9784, 2772, 3222, 2764, 2765, 2775, 2750, 2748, 2743, 2739,
     2723, 2712, 2697, 2677, 2676, 2670, 2666, 2653, 2648, 2646,
     2632, 2625, 2649, 3691, 2599, 2591, 3358, 3560, 3599, 3740,
     3720, 3807, 3808, 3800, 2590, 2582, 3802, 3817, 2580, 2574,
     2569, 3809, 2559, 2553, 2551, 2537, 2535, 2533, 2527, 2525,

     2516, 2525, 2519,    0, 2498, 2503, 2493, 2489, 2500, 2490,
     2479, 2476, 2463, 2462, 2457,    0, 9784, 9784, 2452, 2458,
     9784, 2461, 2448, 2428, 2419, 2411, 2390, 2389, 2388, 2369,
     2364, 2355, 2354, 2353, 2341, 2315, 2307, 2300, 2277, 2269,
     2308, 2292, 3721, 3824, 3829, 3836, 3828, 3845, 3852, 3837,
     9784, 9784, 3847, 3875, 9784, 9784, 9784, 3855, 9784, 9784,
     9784, 9784, 9784, 9784, 9784, 9784, 9784, 2255, 9784, 2249,
     2237, 2242, 2231, 2242, 2236, 2217, 9784, 9784, 9784, 9784,
     9784, 2213, 2209, 3257, 2214, 2212, 9784, 9784, 9784, 9784,
     9784, 9784, 9784, 9784, 9784, 9784, 9784, 9784, 2231, 2226,

     9784, 9784, 3883, 3469, 3899, 2077, 3901, 3903, 2180, 2161,
     2154, 2155, 2149, 2141, 2147, 2133, 2125, 2116, 9784, 2108,
     2105, 9784, 9784, 3907, 3569,  634, 3909, 3911, 2079, 2043,
     2029, 1968, 1964, 1948, 1935, 1919, 1564, 3265, 1546, 1507,
     3744, 2037, 3916, 1503, 1434,  948,  914,  872,  573, 9784,
     3370,  549, 3379, 1537, 3920,  507,  496, 3504, 9784,  437,
     3757, 1451,  224, 3843,  179, 1482,  111, 3915, 2114, 9784,
     3921, 9784, 3973, 4005, 4037, 4069, 4101, 4133, 4165, 4197,
     4229, 4261, 4293, 4325, 4357, 4389, 4421, 4453, 4485, 4517,
     4549, 4581, 4613, 4645, 4677, 4709, 4741, 4773, 4798, 4818,

     4835, 4856, 4875, 4896, 4927, 4953, 4985, 4995, 5012, 5043,
     5074, 5105, 5137, 5163, 5195, 5222, 5253, 5284, 5315, 5333,
     5365, 5397, 5429, 5455, 5465, 5496, 5527, 5558, 5589, 5599,
     5616, 5634, 5666, 5684, 5716, 5748, 5779, 5796, 5828, 5860,
     5891, 5918, 5950, 5968, 6000, 6010, 6027, 6037, 6054, 6086,
     6104, 6136, 6168, 6186, 6218, 6250, 6276, 6307, 6317, 6332,
     6352, 6365, 6392, 6402, 3904, 6421, 6447, 6474, 6500, 6526,
     6558, 6575, 6600, 6631, 6662, 6693, 6725, 6740, 6772, 6798,
     6824, 6856, 6888, 6915, 6941, 6972, 7003, 7034, 7066, 7097,
     7115, 7147, 7179, 7211, 7237, 7263, 7294, 7304, 7335, 7366,

     7397, 7428, 7443, 7460, 7485, 7503, 7535, 7553, 7585, 7617,
     7642, 7660, 7692, 7724, 7755, 7782, 7814, 7832, 7864, 7881,
     7906, 7923, 7948, 7980, 7998, 8030, 8062, 3909, 8080, 8112,
     8144, 8159, 8191, 8209, 8224, 8251, 8283, 8314, 3914, 8340,
     8367, 3923, 3943, 8398, 8419, 8445, 8455, 8487, 8502, 8528,
     8554, 8586, 8613, 8640, 8672, 8703, 8729, 8755, 8786, 8817,
     8848, 8863, 8873, 8890, 8900, 8915, 8947, 8957, 8967, 4784,
     8999, 9017, 9034, 9061, 4789, 9092, 9119, 9129, 9155, 9181,
     9204, 9236, 9262, 9294, 9321, 9347, 9357, 9388, 9419, 9436,
     9451, 9469, 9496, 9528, 9559, 9591, 9623, 9655, 9687, 9719,

     9751
    } ;

static yyconst flex_int16_t yy_def[1402] =
    {   0,
     1173, 1173, 1172,    3, 1174, 1174, 1175, 1175, 1172,    9,
     1172,   11, 1176, 1176, 1177, 1177, 1172,   17, 1172,   19,
     1178, 1178, 1179, 1179, 1180, 1180, 1172,   27, 1172,   29,
     1172,   31, 1172,   33, 1181, 1181, 1172,   37, 1182, 1182,
     1172,   41, 1183, 1183, 1184, 1184, 1185, 1185, 1186, 1186,
     1187, 1187, 1188, 1188, 1189, 1189, 1190, 1190, 1172,   59,
     1191, 1191, 1192, 1192, 1172,   65, 1172,   67, 1193, 1193,
     1193, 1193, 1172,   73, 1194, 1194, 1195, 1195, 1172,   79,
     1196, 1196, 1197, 1197, 1172, 1172, 1172, 1172, 1172, 1198,
     1199, 1200, 1200, 1201, 1172, 1202, 1203, 1204, 1172, 1172,

     1200, 1200, 1201, 1200, 1172, 1172, 1172, 1205, 1206, 1206,
     1206, 1207, 1172, 1172, 1172, 1208, 1209, 1172, 1172, 1172,
     1172, 1210, 1210, 1172, 1211, 1172, 1212, 1172, 1172, 1213,
     1214, 1214, 1172, 1214, 1172, 1172, 1215, 1216, 1216, 1216,
     1172, 1216, 1172, 1172, 1217, 1217, 1172, 1218, 1219, 1172,
     1172, 1220, 1172, 1172, 1172, 1221, 1172, 1172, 1172, 1222,
     1172, 1172, 1172, 1223, 1224, 1224, 1224, 1172, 1172, 1225,
     1226, 1172, 1172, 1172, 1172, 1227, 1227, 1172, 1228, 1172,
     1229, 1172, 1172, 1230, 1231, 1172, 1172, 1232, 1172, 1233,
     1172, 1172, 1172, 1172, 1234, 1172, 1235, 1172, 1236, 1172,

     1237, 1172, 1238, 1172, 1172, 1172, 1172, 1239, 1172, 1240,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1241, 1172, 1172, 1241, 1172, 1172, 1172, 1172, 1172, 1242,
     1172, 1172, 1172, 1172, 1243, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1244, 1172, 1245, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1246, 1247, 1172,
     1172, 1172, 1248, 1249, 1172, 1250, 1172, 1172, 1172, 1172,
     1172, 1251, 1172, 1252, 1172, 1172, 1172, 1253, 1172, 1172,
     1172, 1172, 1172, 1172, 1254, 1172, 1255, 1172, 1172, 1256,
     1256, 1172, 1172, 1172, 1257, 1257, 1172, 1172, 1172, 1258,

     1172, 1259, 1260, 1261, 1262, 1172, 1261, 1172, 1172, 1263,
     1261, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1264, 1257, 1264,  328,
      328,  328,  328,  328,  328, 1172, 1172, 1265, 1266, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1261, 1172, 1172, 1261, 1261,
     1172, 1172, 1268, 1172, 1269, 1270, 1269, 1172, 1172, 1269,
     1271, 1172, 1272, 1273, 1272, 1172, 1172, 1172, 1172, 1172,
     1274, 1172, 1274, 1275, 1276, 1274, 1275, 1277, 1172, 1172,
     1172, 1276, 1276, 1278, 1279, 1172, 1280, 1281, 1280, 1172,

     1172, 1280, 1282, 1282, 1283, 1283, 1282, 1172, 1284, 1285,
     1284, 1282, 1172, 1172, 1284, 1172, 1286, 1172, 1286, 1287,
     1288, 1286, 1172, 1289, 1287, 1288, 1288, 1290, 1291, 1172,
     1172, 1172, 1292, 1172, 1172, 1172, 1172, 1293, 1172, 1172,
     1172, 1172, 1294, 1172, 1295, 1296, 1295, 1172, 1172, 1295,
     1297, 1172, 1298, 1297, 1172, 1299, 1172, 1172, 1172, 1172,
     1300, 1172, 1300, 1301, 1302, 1300, 1301, 1172, 1172, 1172,
     1302, 1302, 1303, 1304, 1305, 1304, 1172, 1172, 1172, 1306,
     1172, 1172, 1172, 1172, 1307, 1172, 1172, 1172, 1308, 1172,
     1309, 1172, 1310, 1172, 1172, 1311, 1172, 1172, 1172, 1312,

     1172, 1172, 1313, 1313, 1172, 1172, 1314, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1315, 1172, 1315, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1316, 1172, 1172, 1172, 1317, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1318, 1172, 1172,
     1172, 1319, 1172, 1172, 1172, 1172, 1172, 1172, 1320, 1321,
     1320, 1172, 1172, 1322, 1323, 1322, 1172, 1172, 1324, 1172,
     1172, 1325, 1172, 1326, 1172, 1172, 1327, 1328, 1172, 1329,
     1172, 1330, 1172, 1331, 1172, 1172, 1332, 1333, 1334, 1172,
     1335, 1172, 1172, 1335, 1336, 1335, 1334, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1337, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1338, 1338, 1339, 1172, 1340, 1340, 1340,
     1172, 1172, 1341, 1340, 1340, 1340, 1342, 1343, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1172, 1172, 1172, 1172, 1172,
     1335, 1172, 1172, 1345, 1345, 1346, 1347, 1172, 1348, 1348,
     1172, 1349, 1350, 1350, 1351, 1172, 1352, 1353, 1353, 1354,
     1355, 1172, 1356, 1172, 1172, 1172, 1357, 1357, 1358, 1359,
     1360, 1361, 1361, 1172, 1172, 1362, 1363, 1364, 1172, 1172,
     1172, 1172, 1172, 1365, 1366, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1367, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1368, 1172, 1369,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1370, 1172,
     1172, 1172, 1172, 1172, 1371, 1372, 1373, 1172, 1172, 1172,
     1172, 1172, 1172, 1374, 1374, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1375, 1172, 1376, 1376, 1377, 1376, 1376,
     1376, 1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1172,
     1172, 1380, 1381, 1172, 1382, 1172, 1382, 1172, 1383, 1384,
     1384, 1385, 1172, 1172, 1172, 1172, 1386, 1387, 1388, 1388,
     1389, 1172, 1172, 1390, 1172, 1172, 1172, 1172, 1172, 1391,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1392, 1373, 1172, 1172, 1172, 1172,
     1172, 1393, 1172, 1172, 1172, 1172, 1394, 1394, 1376, 1376,
     1172, 1376, 1379, 1378, 1379, 1379, 1379, 1172, 1381, 1172,
     1172, 1383, 1385, 1172, 1172, 1172, 1386, 1395, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1396, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1392, 1172, 1172, 1172, 1397, 1172, 1393, 1393,

     1172, 1172, 1376, 1376, 1172, 1376, 1379, 1379, 1379, 1379,
     1381, 1172, 1172, 1383, 1385, 1172, 1172, 1172, 1386, 1395,
     1395, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1398, 1399, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1397, 1397, 1172, 1172, 1376, 1376, 1376, 1379,
     1379, 1379, 1379, 1381, 1172, 1172, 1383, 1385, 1172, 1172,
     1172, 1386, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1400, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1401, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1376, 1376, 1376, 1379, 1379, 1379, 1379, 1381,
     1172, 1172, 1383, 1385, 1172, 1172, 1172, 1386, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1376, 1376, 1172, 1378, 1379, 1379, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1376, 1376, 1378, 1379, 1379, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1376, 1378, 1379, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1376, 1378, 1379, 1172, 1172, 1172, 1172, 1172,
     1172, 1378, 1172, 1172, 1172, 1378, 1172, 1172, 1378, 1172,
     1378,    0, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172
    } ;

static yyconst flex_int16_t yy_nxt[9859] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   87,   87,   92,   87,   93,   94,   87,   92,
       92,   92,   87,   95,   87,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   87,   98,   87,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   87,
       87,   87,   87,   87,   99,  155,  155,   99,  159,  156,
      156,  159,  160,  593,  218,  160,  100,  101,  191,  102,
      103,  191,  198,  104,  104,  105,  218,  198,  231,   86,

      232,  241,   86,  199,  354,  593,  374,  354,  199,  206,
      207,  376,  206,  241,  208,  200,  157,  157,  720,  161,
      200,  233,  161,  206,  207,  219,  206,  580,  208,  192,
      580,  254,  192,  201,  254,  288,  288,  219,  201,  234,
      720,  726,  242,  105,  106,  106,  107,  106,  106,  106,
      108,  209,  106,  106,  242,  106,  106,  106,  211,  106,
      212,  106,  110,  726,  275,  209,  110,  106,  106,  213,
      227,  228,  255,  227,  214,  255,  289,  289,  276, 1004,
      291,  215,  227,  228,  291,  227,  106,  111,  106,  292,
      293,  511,  581,  292,  293,  275,  510,  502,  550,  216,

      502,  305,  503,  552,  231,  277,  232,  297,  298,  276,
      297,  569,  229,  106,  106,  106,  106,  106,  106,  107,
      106,  106,  106,  108,  229,  106,  106,  233,  106,  106,
      106,  211,  106,  212,  106,  110,  277, 1168,  568,  110,
      106,  106,  213,  248,  236,  234,  237,  214,  684,  299,
      685,  555,  249,  250,  215,  306,  557,  366,  367,  106,
      111,  106,  367,  646,  307,  691,  251,  238,  392,  392,
      392,  392,  216,  305,  359,  393,  360,  360,  360,  692,
     1167,  407,  305,  367,  252,  239,  106,  106,  106,  106,
      114,  114,  115,  114,  114,  114,  114,  114,  116,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  114,  118,  114,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  114,
      114,  114,  114,  117,  119,  120,  121,  120,  120,  119,
      119,  119,  122,  119,  119,  119,  119,  119,  119,  119,
      119,  123,  119,  119,  119,  119,  124,  119,  119,  119,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  119,  126,  119,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  119,  119,  119,  127,  125,  128,  128,
      129,  128,  128,  128,  130,  267,  128,  128,  248,  128,
      128,  128,  236,  128,  237,  128,  132,  249,  250,  526,
      132,  133,  128,  527,  267,  267,  706,  304,  268,  304,
      304,  251,  304,  304,  304,  238,  361,  267,  305,  361,
      128,  134,  128,  594,  956,  707,  268,  268,  269,  252,
      492,  362,  515,  239,  528,  515, 1165,  353,  957,  526,

      269,  493,  516,  527,  594,  268,  269,  128,  128,  128,
      128,  128,  128,  129,  128,  128,  128,  130,  269,  128,
      128,  279,  128,  128,  128,  279,  128,  294,  128,  132,
      294,  494,  280,  132,  133,  128,  280,  308,  614,  304,
      309,  304,  310,  354,  281,  353,  354,  615,  281,  588,
      305,  295,  588,  128,  134,  128,  377,  378,  595,  377,
      389,  390,  282,  389, 1004, 1163,  282,  305,  312,  296,
      594,  374, 1172,  367,  600,  354,  376,  367,  354,  595,
      128,  128,  128,  128,  135,  135,  136,  135,  135,  135,
      137,  594,  135,  135,  600,  135,  135,  135,  367,  135,

      379,  135,  139, 1160,  391,  723,  139,  140,  141,  355,
      521,  522,  355,  521,  594,  306,  380,  380,  380,  380,
      380,  380,  380,  380,  356,  723,  135,  142,  135, 1158,
      353,  354,  381,  305,  354,  594,  381,  382,  398,  399,
      703,  382,  611,  399,  580, 1172,  399,  580,  430,  431,
      399,  430,  523,  135,  135,  135,  135,  135,  135,  136,
      135,  135,  135,  137,  399,  135,  135,  704,  135,  135,
      135,  399,  135,  605,  135,  139,  612,  618,  353,  139,
      140,  141,  357,  358,  594,  357,  380,  380,  380,  380,
     1142,  590,  432,  308,  606,  304,  309,  304,  310,  135,

      142,  135,  381,  613,  594,  408,  305,  382,  388,  426,
      426,  426,  426,  590,  591,  592,  427,  374,  471,  471,
      471,  471,  376,  408,  312,  472,  135,  135,  135,  135,
      119,  143,  144,  143,  143,  119,  119,  119,  145,  119,
      119,  119,  119,  119,  119,  119,  119,  146,  119,  119,
      119,  119,  147,  119,  119,  119,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  119,  126,  119,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  119,

      119,  119,  149,  148,  150,  150,  151,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  150,  153,  150,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  150,  150,  150,  150,  152,  162,  162,
      163,  162,  162,  162,  164,  607,  162,  162,  607,  162,
      162,  162, 1003,  162, 1172,  162,  166, 1172,  550,  727,

      166,  162,  162,  552, 1172,  357,  358, 1004,  357,  380,
      380,  380,  380,  550,  435,  436,  383,  435,  552,  727,
      162,  167,  162,  368,  369,  381,  368,  618,  440,  441,
      382,  440,  627,  530,  628,  628,  628,  531, 1004, 1172,
      367,  555,  594,  532,  367,  533,  557,  162,  162,  162,
      162,  162,  162,  163,  162,  162,  162,  164,  437,  162,
      162,  594,  162,  162,  162,  367,  162,  370,  162,  166,
      408, 1004,  442,  166,  162,  162,  416,  416,  416,  416,
      385,  410,  411,  594,  446,  447,  411,  732,  408,  447,
      732,  555,  417,  162,  167,  162,  557,  418,  416,  416,

      416,  416,  357,  358, 1157,  357,  304,  411,  304,  304,
      447,  304,  304,  304,  417,  368,  369,  305,  368,  418,
      162,  162,  162,  162,  168,  168,  169,  168,  168,  168,
      168,  168,  170,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  168,  172,  168,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  168,  168,  168,  168,  171,  173,  174,

      175,  174,  174,  173,  173,  173,  176,  173,  173,  173,
      173,  173,  173,  173,  173,  177,  173,  173,  173,  173,
      178,  173,  173,  173,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      173,  180,  173,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  173,  173,  173,
      181,  179,  182,  182,  183,  182,  182,  182,  182,  182,
      184,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  182,  186,  182,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  182,  182,  182,  182,  185,   86,   86,  187,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   86,  189,
       86,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,   86,   86,   86,   86,  188,
      193,  193,  194,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  193,  196,  193,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  193,
      193,  193,  193,  195,   86,   86,  202,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,   86,  204,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,   86,   86,   86,   86,  203,  220,  221,
      222,  220,  221,  220,  220,  220,  220,  220,  220,  223,
      220,  220,  220,  220,  457,  458,  220,  457,  951,  728,
      220,  220,  220,  220,  618,  952,  818,  386,  386,  386,

      386, 1166, 1004,  821,  383,  423,  416,  416,  423,  728,
      220,  225,  220,  381,  652,  424,  818,  652,  382,  468,
      469,  417,  468,  821,  424,  618,  418,  607,  459, 1169,
      607,  502,  477,  478,  502,  477,  503,  220,  220,  220,
      220,  220,  220,  221,  222,  220,  221,  220,  220,  220,
      220,  220,  220,  223,  220,  220,  220,  220,  400,  401,
      220,  400, 1156,  470,  220,  220,  220,  220,  385,  618,
     1152, 1172, 1172,  447, 1172,  399,  479,  447,  596,  399,
      618,  596, 1172,  411,  220,  225,  220,  411,  534, 1172,
      620,  377,  378,  530,  377, 1162,  607,  531,  447,  607,

      399,  597,  402,  532, 1151,  533,  389,  390,  411,  389,
     1149,  220,  220,  220,  220,  220,  243,  243,  244,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  243,  246,
      243,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  243,  243,  243,  243,  245,
      256,  256,  257,  256,  256,  256,  256,  256,  258,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  256,  260,  256,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  256,
      256,  256,  256,  259,  261,  261,  262,  261,  261,  261,
      261,  261,  263,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  261,  265,  261,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  261,  261,  261,  261,  264,  270,  270,
      271,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      270,  273,  270,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  270,  270,  270,
      270,  272,  283,  283,  284,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  283,  286,  283,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  283,  283,  283,  283,  285,  313, 1004,  936,  412,
      416,  416,  416,  416, 1148,  482,  483,  419,  482,  314,

     1172,  411, 1147,  594,  937,  411,  417,  408,  635,  315,
      316,  418,  635,  633,  317,  318,  633,  607,  319,  320,
      607,  321,  322,  594,  297,  298,  411,  297,  607,  315,
      316,  607, 1004,  635,  317,  318, 1004,  305,  824,  484,
      319,  320,  323,  324,  321,  322,  325,  325,  325,  325,
      607,  413,  414,  607,  413,  326, 1172,  486,  487,  824,
      486,  421,  325,  325,  327,  737,  299, 1172,  411,  644,
      618,  649,  411,  644, 1172,  649,  422,  422,  422,  422,
      618,  294,  329,  419,  294,  622,  330, 1146,  331,  332,
      333, 1154,  417,  411,  644,  415,  649,  418,  594, 1145,

      607,  488,  334,  607,  607,  295,  335,  607,  336,  736,
      337,  338,  325,  325,  325,  325,  448,  449,  594,  448,
     1172,  326, 1126,  296,  452,  452,  452,  452,  325,  325,
      329,  453, 1172,  447, 1144,  366,  367,  447,  497,  498,
      367,  497,  454,  454,  454,  455,  618,  421,  327,  741,
      341,  492,  342, 1140,  343,  344,  345,  618,  447,  619,
      450,  367,  493,  460,  460,  460,  460, 1139,  346, 1138,
      297,  298,  347,  297,  336, 1171,  337,  338,  348,  461,
      496,  348,  499, 1137,  462,  460,  460,  460,  460, 1136,
      349,  349,  494,  350,  351, 1172,  367,  352,  352,  353,

      367,  461,  295, 1135, 1134, 1133,  462,  460,  460,  460,
      460, 1132,  299, 1131,  463,  466,  466,  466,  466, 1130,
      296,  367,  463,  461,  460,  460,  460,  460,  462,  512,
      513,  461,  512,  733,  607,  607,  462,  607,  607, 1129,
      461,  518,  519,  355,  518,  462,  355,  353,  403,  403,
     1123,  403,  403,  403,  404, 1122,  403,  403,  626,  403,
      403,  403, 1121,  403,  353,  403,  406,  733, 1120, 1118,
      406,  403,  407,  514, 1117, 1116,  618,  618,  465,  495,
      495,  495,  495,  621,  623,  520,  465, 1115, 1114, 1113,
      403,  406,  403,  624,  733,  495,  495,  496,  535,  536,

     1112,  535,  539,  540, 1111,  539,  543,  544, 1110,  543,
      546,  547,  353,  546, 1109,  495, 1102,  403,  403,  403,
      403,  607,  596,  607,  607,  596,  607,  359,  611,  360,
      360,  360, 1101,  400,  401,  305,  400, 1100,  361, 1099,
      607,  361,  537,  607,  495,  597,  541,  598,  633,  355,
      545,  633,  355,  362,  548,  325,  325,  325,  325,  353,
      599,  298,  612,  618,  362,  618,  361,  598, 1098,  361,
      353,  325,  325,  575,  725,  361, 1097,  725,  361,  398,
      399,  362,  599,  625,  399,  629,  630,  353,  629,  613,
      626,  325,  640,  640,  640,  640,  353,  597,  332,  333,

      631,  739, 1096,  366,  367,  399,  632,  353,  367,  305,
      380,  380,  380,  380, 1095, 1094, 1093,  336,  353,  337,
      338,  325,  325,  325,  325, 1092,  381, 1172,  399,  367,
     1091,  382,  399,  413,  414,  353,  413,  325,  325,  325,
      430,  431,  636,  430,  353,  386,  386,  386,  386, 1090,
     1089, 1088,  383,  399,  632,  435,  436,  575,  435,  440,
      441,  381,  440,  658,  332,  333,  382,  658, 1172, 1172,
     1172, 1172, 1087,  448,  449, 1172,  448,  457,  458,  633,
      457, 1086,  633,  336, 1172,  337,  338,  582,  658, 1172,
      582, 1085,  582,  582,  582,  582,  582,  582,  582,  583,

      582,  584,  582,  584,  585,  582, 1084, 1083, 1082,  582,
      582,  582,  587, 1081,  468,  469,  385,  468,  522,  380,
      380,  380,  380, 1079, 1078,  392,  392,  392,  392,  582,
      582,  582,  393,  477,  478,  381,  477, 1077, 1076, 1172,
      382,  388,  392,  392,  392,  392, 1075, 1074, 1073,  393,
      398,  399, 1072, 1071, 1070,  399,  582,  582,  582,  582,
      582,  607,  482,  483,  607,  482, 1068, 1172, 1172, 1172,
     1172,  386,  386,  386,  386, 1004,  399, 1067,  383,  380,
      380,  380,  380, 1172, 1172, 1172, 1066,  381, 1065,  645,
      486,  487,  382,  486, 1064,  381, 1063,  408, 1062,  607,

      382,  388,  607, 1172, 1172, 1172, 1172, 1172,  410,  411,
     1172, 1172, 1061,  411, 1060,  408,  426,  426,  426,  426,
     1059, 1172,  411,  427,  497,  498,  411,  497, 1172, 1172,
     1057, 1172, 1172,  348,  411, 1056,  348,  452,  452,  452,
      452, 1055,  385, 1052,  408,  349,  349,  411,  350,  351,
      735, 1051,  352,  352,  353,  410,  411,  295,  455, 1042,
      411, 1041,  408,  416,  416,  416,  416,  422,  422,  422,
      422,  446,  447,  898,  419,  296,  447,  512,  513,  417,
      512,  411,  607,  417,  418,  607, 1040, 1039,  418, 1172,
     1172, 1172, 1172, 1038,  650, 1037, 1172,  447,  518,  519,

     1036,  518,  353,  403,  403, 1172,  403,  403,  403,  646,
     1172,  403,  403, 1035,  403,  403,  403, 1034,  403,  515,
      647,  406,  515, 1033, 1032,  406,  403,  407,  808,  516,
      740,  808,  423,  416,  416,  423,  535,  536,  421,  535,
      539,  540,  424,  539, 1031,  403,  406,  403,  417,  426,
      426,  426,  426,  418,  521,  522,  427,  521, 1172, 1030,
     1172, 1172,  422,  422,  422,  422, 1172,  447, 1172,  419,
     1029,  447,  403,  403,  403,  403,  403,  403,  417,  403,
      403,  403,  646,  418,  403,  403, 1028,  403,  403,  403,
     1027,  403,  447,  403,  406, 1026,  523, 1025,  406,  403,

      403,  423,  416,  416,  423,  423,  416,  416,  423,  543,
      544,  424,  543,  546,  547,  424,  546,  417,  403,  406,
      403,  417,  418, 1024, 1023, 1022,  418, 1172, 1172, 1172,
     1172,  446,  447,  421, 1172, 1020,  447,  471,  471,  471,
      471, 1019, 1016, 1015,  472,  403,  403,  403,  403,  652,
     1014, 1013,  652,  452,  452,  452,  452,  447, 1012,  424,
      453,  452,  452,  452,  452, 1011,  817, 1010,  453,  817,
      659,  454,  454,  454,  455,  460,  460,  460,  460,  454,
      454,  454,  455,  452,  452,  452,  452, 1009, 1008, 1004,
      453,  461,  466,  466,  466,  466,  462,  652, 1007,  463,

      652,  662,  662,  662,  455, 1006, 1005,  424,  461, 1172,
     1172, 1172, 1172,  462, 1002, 1001, 1172,  460,  460,  460,
      460,  466,  466,  466,  466, 1172, 1000,  999,  463,  732,
     1172,  607,  732,  461,  607,  998,  733,  461,  462,  997,
      996,  995,  462,  460,  460,  460,  460,  471,  471,  471,
      471,  994,  993,  991,  472, 1172, 1172, 1172, 1172,  461,
      990,  989, 1172,  465,  462,  627,  986,  628,  628,  628,
      733,  607,  607,  618,  607,  607,  985,  976,  607,  607,
     1172,  607,  607,  607,  743,  607,  607,  795,  607,  975,
      795,  732,  465,  582,  732,  823,  582,  733,  582,  582,

      582,  582,  582,  582,  582,  583,  582,  584,  582,  584,
      717,  582,  972,  618,  618,  582,  582,  582,  587,  971,
      618,  618,  744,  716,  970,  618,  746,  618,  969,  968,
      967,  745,  749,  748,  966,  582,  718,  582,  629,  630,
      747,  629,  965,  964,  796,  725,  629,  630,  725,  629,
      963,  366,  635,  750,  629,  630,  635,  629,  962,  632,
      961,  751,  582,  582,  582,  582,  582,  632,  597,  752,
      629,  630,  960,  629,  959,  632,  958,  635,  305, 1172,
      635,  955,  366,  367,  635,  751,  607,  367,  954,  607,
      953,  632,  950,  755,  755,  755,  755,  757,  757,  757,

      757,  398,  644,  949,  948,  635,  644,  632,  367, 1172,
      644,  947,  398,  399,  644,  632,  756,  399,  607,  753,
      756,  607,  808,  632,  945,  808,  944,  644,  943,  408,
      828,  446,  658,  828,  939,  644,  658,  940,  399,  632,
      410,  649,  942, 1172,  658,  649,  829,  408,  658,  759,
      403,  403,  941,  403,  403,  403,  646,  658,  403,  403,
      938,  403,  403,  403, 1172,  403,  649,  403,  761,  658,
      935,  830,  761,  403,  403, 1172,  649,  934,  933,  408,
      649,  822, 1172,  308,  822,  304,  607,  304,  816,  607,
      410,  411,  403,  761,  403,  411,  305,  408,  446,  447,

      932,  649,  607,  447,  823,  607,  607,  931,  930,  607,
      452,  452,  452,  452,  929,  607,  411,  768,  607,  403,
      403,  403,  403, 1021,  447,  928, 1021,  762,  769,  769,
      769,  455,  927,  926,  925,  767,  771,  771,  771,  771,
      924,  923,  922,  453,  452,  452,  452,  452,  735,  918,
      917,  453,  452,  452,  452,  452,  832,  455, 1119,  453,
      735, 1119,  662,  662,  662,  455, 1150,  916,  906, 1150,
      662,  662,  662,  455,  827,  828,  827,  827,  828,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  827,  827,  827,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  827,  827,  827,  827,  827,  607,  897,
      607,  607,  897,  607,  755,  755,  755,  755,  913,  607,
      366,  367,  607,  629,  630,  367,  629,  629,  630,  912,
      629, 1159,  898,  905, 1159,  902,  900,  756,  750,  900,
     1161,  901,  838, 1161,  632,  896,  367,  895,  632,  894,
      618,  607,  618,  607,  607,  607,  607,  607,  607,  823,

      607,  839,  716,  836, 1043,  833,  827,  828,  827,  827,
      828,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  632,  618,  892,  618,  632,  618,  891,  618,
      607,  629,  630,  607,  629,  890,  889,  837,  827,  834,
      827,  835,  888,  744,  887,  744,  752,  757,  757,  757,
      757,  886,  632,  398,  399,  305,  446,  447,  399,  607,
      607,  447,  607,  607,  885,  827,  827,  827,  827,  827,
      756,  308,  884,  304,  408,  304,  816,  883,  607,  399,
      607,  607,  447,  607,  305,  410,  411,  904,  607,  882,

      411,  607,  408,  607,  842, 1164,  607,  847, 1164,  881,
      632,  403,  403,  880,  403,  403,  403,  646,  903,  403,
      403,  411,  403,  403,  403,  879,  403, 1125,  647,  761,
      618,  878,  618,  761,  403,  407,  843,  907,  452,  452,
      452,  452,  877,  366,  367,  768,  876,  909,  367,  607,
      977,  875,  607,  403,  761,  403,  769,  769,  769,  455,
      978,  607,  874,  873,  607,  771,  771,  771,  771,  367,
      607,  974,  453,  607,  974,  607,  911,  872,  607,  871,
      403,  403,  403,  403,  403,  403,  455,  403,  403,  403,
      646,  618,  403,  403,  898,  403,  403,  403,  908,  403,

      607,  403,  761,  607,  870,  869,  761,  403,  403,  868,
     1044,  452,  452,  452,  452, 1141,  900,  618,  768,  900,
      867,  980,  629,  630,  858,  629,  403,  761,  403,  769,
      769,  769,  455,  859,  860,  857,  856,  750,  861,  823,
      855,  862,  863,  632,  607,  607,  864,  607,  607, 1045,
      865,  854,  866,  403,  403,  403,  403,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  398,  399,  853,  618,  852,  399,  851,
      607,  632,  974,  607,  408,  974,  475,  910,  850,  827,

      827,  827,  849,  846,  845,  410,  411,  979,  607,  399,
      411,  607,  408,  446,  447,  898,  914,  607,  447,  844,
      607,  607,  607,  841,  607,  607,  827,  827,  827,  827,
      827,  411,  618,  452,  452,  452,  452,  981,  915,  447,
      768,  607,  366,  367,  607,  607,  919,  367,  607,  840,
      618,  920,  920,  920,  455,  398,  399,  618, 1161,  618,
      399, 1161,  408,  618,  446,  447, 1047,  831,  367,  447,
      982,  826,  984,  410,  411,  825,  597,  820,  411,  983,
      408,  399,  819,  618, 1103,  987,  452,  452,  452,  452,
      447,  814,  813,  768,  992,  452,  452,  452,  452,  411,

     1153, 1046,  768,  988,  920,  920,  920,  455,  607,  607,
      812,  607,  607,  920,  920,  920,  455,  366,  367,  398,
      399,  811,  367,  408,  399,  607,  446,  447,  607,  607,
      607,  447,  607,  607,  410,  411,  810, 1105,  298,  411,
     1105,  408,  809,  367, 1164,  399,  607, 1164,  707,  607,
      618,  618,  447,  607,  366,  367,  607, 1048, 1049,  367,
      411, 1050,  807, 1053,  398,  399,  806,  805,  804,  399,
     1058,  618,  446,  447,  803,  802,  801,  447, 1054, 1106,
      367,  408,  800,  799,  607, 1104,  735,  607,  618,  798,
      399, 1107,  410,  411,  797,  618,  794,  411,  447,  408,

     1105,  298,  607, 1105,  607,  607, 1108,  607,  607,  744,
      607,  607,  607,  607,  793,  607, 1170,  607,  411, 1170,
      607, 1161,  297,  298, 1161,  297,  617,  792,  617,  617,
      617,  709,  790, 1124,  709,  709,  734,  789,  734,  734,
      734,  788,  299,  787,  618,  617,  618,  617,  617,  617,
      786, 1127,  618,  785,  618,  784,  735, 1143,  744,  618,
      783, 1128,  782,  618, 1106,  742,  781,  742,  742,  742,
      779,  778, 1155,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  300,  300,  777,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  303,  709,  776,  775,  709,
      709,  734,  475,  734,  734,  734,  773,  772,  766,  765,
      303,  764,  303,  303,  303,  763,  388,  758,  754,  303,
      304,  731,  304,  304,  730,  304,  729,  722,  721,  304,
      304,  719,  304,  304,  304,  311, 1172,  311,  311,  311,
      311,  305,  311,  305,  305,  716,  311,  311,  311,  311,
      311,  311,  328,  328,  328,  578,  714,  713,  712,  711,
      328,  710,  708,  705,  702,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  701,  328,  328,  339,  555,  339,
      339,  700,  339,  699,  550,  698,  339,  339,  697,  339,

      339,  339,  340,  340,  340,  696,  695,  694,  693,  690,
      340,  689,  688,  687,  686,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  683,  340,  340,  363,  363,  524,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  365,
      682,  681,  680,  679,  678,  365,  505,  365,  365,  365,
      365,  365,  505,  677,  365,  365,  365,  365,  365,  365,
      676,  674,  499,  494,  365,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  373,  673,  373,
      373,  373,  672,  671,  670,  481,  373,  375,  669,  375,
      375,  475,  667,  475,  375,  665,  375,  375,  375,  461,
      664,  661,  444,  375,  384,  384,  384,  384,  656,  439,
      384,  655,  434,  654,  417,  646,  646,  646,  384,  396,
      388,  384,  641,  381,  638,  384,  374,  384,  384,  384,
      637,  372,  364,  384,  384,  387,  387,  387,  387,  616,
      610,  609,  608,  606,  603,  602,  601,  589,  305,  387,
      305,  387,  387,  387,  578,  301,  387,  576,  387,  387,

      387,  573,  571,  568,  566,  387,  394,  394,  394,  394,
      565,  563,  394,  561,  560,  558,  553,  524,  510,  509,
      508,  506,  505,  501,  494,  490,  481,  394,  475,  394,
      394,  394,  461,  444,  439,  434,  394,  395,  395,  417,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  397,
      396,  396,  381,  372,  364,  397,  305,  397,  397,  397,
      397,  397,  302,  301,  397,  397,  397,  397,  397,  397,
     1172,  113,  113, 1172,  397,  405,  405, 1172,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  409,  409, 1172,
     1172, 1172, 1172, 1172,  409, 1172,  409,  409,  409,  409,
      409, 1172,  409,  409,  409,  409,  409,  409,  409, 1172,
     1172, 1172, 1172,  409,  420,  420,  420,  420, 1172, 1172,
      420, 1172, 1172, 1172, 1172, 1172, 1172, 1172,  420, 1172,
     1172,  420, 1172, 1172, 1172,  420, 1172,  420,  420,  420,
     1172, 1172, 1172,  420,  420,  425,  425,  425,  425, 1172,
     1172, 1172, 1172,  425, 1172, 1172, 1172, 1172, 1172,  425,

     1172,  425,  425, 1172, 1172, 1172,  425, 1172,  425,  425,
      425, 1172, 1172, 1172, 1172,  425,  428,  428,  428,  428,
     1172, 1172,  428, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172,  428, 1172,  428,
      428,  428, 1172, 1172, 1172, 1172,  428,  429, 1172, 1172,
      429, 1172, 1172, 1172, 1172,  429, 1172,  429,  429,  429,
     1172, 1172, 1172, 1172,  429,  433,  433, 1172,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  438,  438, 1172,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  443,
      443, 1172,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  445, 1172, 1172, 1172, 1172, 1172,  445, 1172,  445,
      445,  445,  445,  445, 1172, 1172,  445,  445,  445,  445,
      445,  445, 1172, 1172, 1172, 1172,  445,  451, 1172,  451,
      451,  451, 1172, 1172, 1172, 1172,  451,  456,  456,  456,

      456, 1172, 1172,  456, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172,  456,  456, 1172, 1172, 1172,  456, 1172,
      456,  456,  456, 1172, 1172, 1172, 1172,  456,  464,  464,
      464,  464, 1172, 1172,  464, 1172, 1172, 1172, 1172, 1172,
     1172, 1172,  464, 1172, 1172,  464, 1172, 1172, 1172,  464,
     1172,  464,  464,  464, 1172, 1172, 1172,  464,  464,  467,
      467,  467,  467, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172,  467, 1172,  467,  467, 1172, 1172, 1172,
      467, 1172,  467,  467,  467, 1172, 1172, 1172, 1172,  467,
      473,  473,  473,  473, 1172, 1172,  473, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172,  473, 1172,  473,  473,  473, 1172, 1172, 1172, 1172,
      473,  474, 1172,  474,  474,  474, 1172, 1172, 1172, 1172,
      474,  476, 1172,  476, 1172, 1172, 1172, 1172,  476, 1172,
      476,  476,  476, 1172, 1172, 1172, 1172,  476,  480,  480,
     1172,  480, 1172, 1172, 1172, 1172,  480, 1172,  480,  480,
      480, 1172, 1172, 1172, 1172,  480,  485,  485, 1172,  485,
      485,  485,  485,  485,  485,  485,  485, 1172,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485, 1172,
      485,  485,  485,  485,  485,  485,  485,  485,  489, 1172,

     1172,  489, 1172, 1172, 1172, 1172,  489, 1172,  489,  489,
      489, 1172, 1172, 1172, 1172,  489,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491, 1172,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  493,  493,
     1172,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493, 1172,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      495,  495, 1172,  495, 1172,  495,  495,  495, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,  495,  495,

      495, 1172,  495,  495, 1172, 1172, 1172, 1172, 1172,  495,
      500, 1172, 1172,  500, 1172, 1172, 1172, 1172,  500, 1172,
      500,  500,  500, 1172, 1172, 1172, 1172,  500,  504,  504,
     1172,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      507,  507, 1172,  507, 1172,  507,  507,  507,  507,  507,
      507, 1172,  507,  507,  507,  507, 1172,  507,  507,  507,
      507, 1172,  507, 1172,  507,  507,  507,  507,  507,  507,
      507,  507,  517, 1172, 1172,  517, 1172, 1172, 1172, 1172,

      517, 1172, 1172, 1172, 1172,  517,  517, 1172,  517, 1172,
     1172, 1172, 1172,  517, 1172,  517,  517,  517,  525,  525,
     1172,  525, 1172,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525, 1172,
      525, 1172,  525,  525,  525,  525,  525,  525,  525,  525,
      529,  529, 1172,  529, 1172,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529, 1172,  529, 1172,  529,  529,  529,  529,  529,  529,
      529,  529,  538, 1172, 1172,  538, 1172, 1172, 1172, 1172,
      538, 1172,  538,  538,  538, 1172, 1172, 1172, 1172,  538,

      542,  542, 1172,  542,  542,  542,  542,  542,  542, 1172,
     1172,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542, 1172,  542, 1172,  542,  542,  542,  542,  542,  542,
      542,  542,  549, 1172,  549,  549,  549, 1172, 1172, 1172,
     1172,  549,  551, 1172,  551,  551, 1172, 1172, 1172,  551,
     1172,  551,  551,  551, 1172, 1172, 1172, 1172,  551,  554,
     1172,  554,  554,  554, 1172, 1172, 1172, 1172,  554,  556,
     1172,  556,  556, 1172, 1172, 1172,  556, 1172,  556,  556,
      556, 1172, 1172, 1172, 1172,  556,  559,  559, 1172,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559, 1172,  559, 1172,
      559,  559,  559,  559,  559,  559,  559,  559,  562, 1172,
     1172,  562, 1172, 1172, 1172, 1172,  562, 1172,  562,  562,
      562, 1172, 1172, 1172, 1172,  562,  564,  564, 1172,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
     1172,  564,  564,  564,  564,  564,  564,  564,  564, 1172,
      564,  564,  564,  564,  564,  564,  564,  564,  567,  567,
     1172,  567,  567,  567,  567,  567,  567,  567,  567, 1172,
      567,  567,  567,  567,  567,  567,  567,  567,  567, 1172,
      567, 1172,  567,  567,  567,  567,  567,  567,  567,  567,

      570, 1172,  570,  570,  570, 1172, 1172, 1172,  570, 1172,
      570,  570,  570, 1172, 1172, 1172, 1172,  570,  572,  572,
     1172,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572, 1172,  572,  572,  572,  572,  572,  572,  572,  572,
      574,  574,  574,  574,  574,  574,  574,  574,  574, 1172,
     1172,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  328,  328,  328, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172,  328,  328,  328,  328,  328,

      328,  328,  328,  328, 1172,  328,  328,  300,  300, 1172,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  303,
     1172,  303,  303,  303, 1172, 1172, 1172, 1172,  303,  577,
      577, 1172, 1172, 1172,  577, 1172,  577,  577,  577, 1172,
     1172, 1172, 1172,  577,  304, 1172,  304,  304, 1172,  304,
     1172, 1172, 1172,  304,  304, 1172,  304,  304,  304,  579,
     1172, 1172,  579, 1172, 1172, 1172, 1172,  579, 1172,  579,
      579,  579,  586, 1172, 1172,  586, 1172,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  604, 1172,  604,  604,  604, 1172,
     1172, 1172,  604,  339, 1172,  339,  339, 1172,  339, 1172,
     1172, 1172,  339,  339, 1172,  339,  339,  339,  340, 1172,
     1172,  340, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,  340,
      340,  340,  340,  340,  363,  363, 1172,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  365, 1172, 1172, 1172,
     1172, 1172,  365, 1172,  365,  365,  365,  365,  365, 1172,
     1172,  365,  365,  365,  365,  365,  365, 1172, 1172, 1172,
     1172,  365,  634, 1172, 1172, 1172, 1172, 1172,  634, 1172,
      634, 1172,  634,  634,  634, 1172, 1172,  634,  634,  634,
      634,  634,  634, 1172, 1172, 1172, 1172,  634,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      375, 1172,  375,  375, 1172, 1172, 1172,  375, 1172,  375,

      375,  375, 1172, 1172, 1172, 1172,  375,  373, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172,  373, 1172,  373,  373,  373, 1172, 1172, 1172,
     1172,  373,  384,  384,  384,  384, 1172, 1172,  384, 1172,
     1172, 1172, 1172, 1172, 1172, 1172,  384, 1172, 1172,  384,
     1172, 1172, 1172,  384, 1172,  384,  384,  384, 1172, 1172,
     1172,  384,  384,  387,  387,  387,  387, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172,  387, 1172,  387,
      387,  387, 1172, 1172,  387, 1172,  387,  387,  387, 1172,
     1172, 1172, 1172,  387,  394,  394,  394,  394, 1172, 1172,

      394, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172,  394, 1172,  394,  394,  394,
     1172, 1172, 1172, 1172,  394,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639, 1172,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  642, 1172,  642,
     1172, 1172,  642, 1172,  642,  642,  642, 1172, 1172, 1172,
     1172,  642,  395,  395, 1172,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  397, 1172, 1172, 1172, 1172, 1172,
      397, 1172,  397,  397,  397,  397,  397, 1172, 1172,  397,
      397,  397,  397,  397,  397, 1172, 1172, 1172, 1172,  397,
      643, 1172, 1172, 1172, 1172, 1172,  643, 1172,  643, 1172,
      643,  643,  643, 1172, 1172,  643,  643,  643,  643,  643,
      643, 1172, 1172, 1172, 1172,  643,  403,  403, 1172,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  405,  405,
     1172,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      409,  409, 1172, 1172, 1172, 1172, 1172,  409, 1172,  409,
      409,  409,  409,  409, 1172,  409,  409,  409,  409,  409,
      409,  409, 1172, 1172, 1172, 1172,  409,  648, 1172, 1172,
     1172, 1172, 1172,  648, 1172,  648, 1172,  648,  648,  648,
     1172, 1172,  648,  648,  648,  648,  648,  648, 1172, 1172,
     1172, 1172,  648,  420,  420,  420,  420, 1172, 1172,  420,
     1172, 1172, 1172, 1172, 1172, 1172, 1172,  420, 1172, 1172,
      420, 1172, 1172, 1172,  420, 1172,  420,  420,  420, 1172,

     1172, 1172,  420,  420,  425,  425,  425,  425, 1172, 1172,
     1172, 1172,  425, 1172, 1172, 1172, 1172, 1172,  425, 1172,
      425,  425, 1172, 1172, 1172,  425, 1172,  425,  425,  425,
     1172, 1172, 1172, 1172,  425,  428,  428,  428,  428, 1172,
     1172,  428, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172,  428, 1172,  428,  428,
      428, 1172, 1172, 1172, 1172,  428,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651, 1172,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  653, 1172,

     1172,  653, 1172, 1172, 1172, 1172,  653, 1172, 1172, 1172,
     1172, 1172, 1172, 1172,  653, 1172, 1172, 1172, 1172,  653,
     1172,  653,  653,  653, 1172, 1172, 1172, 1172,  653,  429,
     1172, 1172,  429, 1172, 1172, 1172, 1172,  429, 1172,  429,
      429,  429, 1172, 1172, 1172, 1172,  429,  433,  433, 1172,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  438,
      438, 1172,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  443,  443, 1172,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  445, 1172, 1172, 1172, 1172, 1172,  445,
     1172,  445,  445,  445,  445,  445, 1172, 1172,  445,  445,
      445,  445,  445,  445, 1172, 1172, 1172, 1172,  445,  657,
     1172, 1172, 1172, 1172, 1172,  657, 1172,  657, 1172,  657,
      657,  657, 1172, 1172,  657,  657,  657,  657,  657,  657,
     1172, 1172, 1172, 1172,  657,  456,  456,  456,  456, 1172,

     1172,  456, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172,  456,  456, 1172, 1172, 1172,  456, 1172,  456,  456,
      456, 1172, 1172, 1172, 1172,  456,  660, 1172,  660,  660,
      660, 1172, 1172, 1172, 1172,  660,  663,  663,  663,  663,
     1172, 1172,  663, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172,  663,  663, 1172, 1172, 1172,  663, 1172,  663,
      663,  663, 1172, 1172, 1172, 1172,  663,  464,  464,  464,
      464, 1172, 1172,  464, 1172, 1172, 1172, 1172, 1172, 1172,
     1172,  464, 1172, 1172,  464, 1172, 1172, 1172,  464, 1172,
      464,  464,  464, 1172, 1172, 1172,  464,  464,  467,  467,

      467,  467, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172,  467, 1172,  467,  467, 1172, 1172, 1172,  467,
     1172,  467,  467,  467, 1172, 1172, 1172, 1172,  467,  473,
      473,  473,  473, 1172, 1172,  473, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
      473, 1172,  473,  473,  473, 1172, 1172, 1172, 1172,  473,
      666, 1172, 1172, 1172, 1172,  666, 1172,  666,  666,  666,
     1172, 1172, 1172, 1172,  666,  476, 1172,  476, 1172, 1172,
     1172, 1172,  476, 1172,  476,  476,  476, 1172, 1172, 1172,
     1172,  476,  668, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172,  668, 1172,  668,
      668,  668, 1172, 1172, 1172, 1172,  668,  480,  480, 1172,
      480, 1172, 1172, 1172, 1172,  480, 1172,  480,  480,  480,
     1172, 1172, 1172, 1172,  480,  485,  485, 1172,  485,  485,
      485,  485,  485,  485,  485,  485, 1172,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485, 1172,  485,
      485,  485,  485,  485,  485,  485,  485,  489, 1172, 1172,
      489, 1172, 1172, 1172, 1172,  489, 1172,  489,  489,  489,
     1172, 1172, 1172, 1172,  489,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491, 1172,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  493,  493, 1172,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493, 1172,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  675,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172,  675, 1172,  675,  675,  675, 1172,
     1172, 1172, 1172,  675,  500, 1172, 1172,  500, 1172, 1172,
     1172, 1172,  500, 1172,  500,  500,  500, 1172, 1172, 1172,
     1172,  500,  504,  504, 1172,  504,  504,  504,  504,  504,

      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  507,  507, 1172,  507, 1172,  507,
      507,  507,  507,  507,  507, 1172,  507,  507,  507,  507,
     1172,  507,  507,  507,  507, 1172,  507, 1172,  507,  507,
      507,  507,  507,  507,  507,  507,  517, 1172, 1172,  517,
     1172, 1172, 1172, 1172,  517, 1172, 1172, 1172, 1172,  517,
      517, 1172,  517, 1172, 1172, 1172, 1172,  517, 1172,  517,
      517,  517,  525,  525, 1172,  525, 1172,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,

      525,  525,  525, 1172,  525, 1172,  525,  525,  525,  525,
      525,  525,  525,  525,  529,  529, 1172,  529, 1172,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529, 1172,  529, 1172,  529,  529,
      529,  529,  529,  529,  529,  529,  538, 1172, 1172,  538,
     1172, 1172, 1172, 1172,  538, 1172,  538,  538,  538, 1172,
     1172, 1172, 1172,  538,  542,  542, 1172,  542,  542,  542,
      542,  542,  542, 1172, 1172,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542, 1172,  542, 1172,  542,  542,
      542,  542,  542,  542,  542,  542,  551, 1172,  551,  551,

     1172, 1172, 1172,  551, 1172,  551,  551,  551, 1172, 1172,
     1172, 1172,  551,  549, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,  549, 1172,
      549,  549,  549, 1172, 1172, 1172, 1172,  549,  556, 1172,
      556,  556, 1172, 1172, 1172,  556, 1172,  556,  556,  556,
     1172, 1172, 1172, 1172,  556,  554, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
      554, 1172,  554,  554,  554, 1172, 1172, 1172, 1172,  554,
      559,  559, 1172,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

      559, 1172,  559, 1172,  559,  559,  559,  559,  559,  559,
      559,  559,  562, 1172, 1172,  562, 1172, 1172, 1172, 1172,
      562, 1172,  562,  562,  562, 1172, 1172, 1172, 1172,  562,
      564,  564, 1172,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564, 1172,  564,  564,  564,  564,  564,
      564,  564,  564, 1172,  564,  564,  564,  564,  564,  564,
      564,  564,  567,  567, 1172,  567,  567,  567,  567,  567,
      567,  567,  567, 1172,  567,  567,  567,  567,  567,  567,
      567,  567,  567, 1172,  567, 1172,  567,  567,  567,  567,
      567,  567,  567,  567,  570, 1172,  570,  570,  570, 1172,

     1172, 1172,  570, 1172,  570,  570,  570, 1172, 1172, 1172,
     1172,  570,  572,  572, 1172,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572, 1172,  572,  572,  572,  572,
      572,  572,  572,  572,  574,  574,  574,  574,  574,  574,
      574,  574,  574, 1172, 1172,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  577,  577, 1172, 1172,
     1172,  577, 1172,  577,  577,  577, 1172, 1172, 1172, 1172,
      577,  715,  715, 1172,  715,  715,  715,  715, 1172,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  579,  579, 1172,  579, 1172, 1172, 1172,
     1172,  579, 1172,  579,  579,  579,  304, 1172,  304,  304,
     1172,  304, 1172, 1172, 1172,  304,  304, 1172,  304,  304,
      304,  586, 1172, 1172,  586, 1172,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  724,  724, 1172,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,

      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  604, 1172, 1172,  604, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172,  604, 1172,  604,  604,
      604,  328, 1172, 1172,  328, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172,  328, 1172,  328,  328,  328,  738,  738, 1172,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738, 1172,  738,  738,  340,

     1172, 1172,  340, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
      340,  340,  340,  340,  340,  634, 1172, 1172, 1172, 1172,
     1172,  634, 1172,  634,  634,  634,  634,  634, 1172, 1172,
      634,  634,  634,  634,  634,  634, 1172, 1172, 1172, 1172,
      634,  365, 1172, 1172, 1172, 1172, 1172,  365, 1172,  365,
      365,  365,  365,  365, 1172, 1172,  365,  365,  365,  365,
      365,  365, 1172, 1172, 1172, 1172,  365,  373, 1172,  373,
      373,  373, 1172, 1172, 1172, 1172,  373,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  642,
     1172,  642, 1172, 1172,  642, 1172,  642,  642,  642, 1172,
     1172, 1172, 1172,  642,  643, 1172, 1172, 1172, 1172, 1172,
      643, 1172,  643,  643,  643,  643,  643, 1172, 1172,  643,
      643,  643,  643,  643,  643, 1172, 1172, 1172, 1172,  643,
      397, 1172, 1172, 1172, 1172, 1172,  397, 1172,  397,  397,
      397,  397,  397, 1172, 1172,  397,  397,  397,  397,  397,
      397, 1172, 1172, 1172, 1172,  397,  760,  760, 1172,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  648,  648,
     1172, 1172, 1172, 1172, 1172,  648, 1172,  648,  648,  648,
      648,  648, 1172,  648,  648,  648,  648,  648,  648,  648,
     1172, 1172, 1172, 1172,  648,  409,  409, 1172, 1172, 1172,
     1172, 1172,  409, 1172,  409,  409,  409,  409,  409, 1172,
      409,  409,  409,  409,  409,  409,  409, 1172, 1172, 1172,
     1172,  409,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  653, 1172, 1172,  653, 1172, 1172,
     1172, 1172,  653, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
      653, 1172, 1172, 1172, 1172,  653, 1172,  653,  653,  653,
     1172, 1172, 1172, 1172,  653,  657, 1172, 1172, 1172, 1172,
     1172,  657, 1172,  657,  657,  657,  657,  657, 1172, 1172,
      657,  657,  657,  657,  657,  657, 1172, 1172, 1172, 1172,
      657,  445, 1172, 1172, 1172, 1172, 1172,  445, 1172,  445,
      445,  445,  445,  445, 1172, 1172,  445,  445,  445,  445,
      445,  445, 1172, 1172, 1172, 1172,  445,  770,  770,  770,
      770, 1172, 1172,  770, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172,  770,  770, 1172, 1172, 1172,  770, 1172,
      770,  770,  770, 1172, 1172, 1172, 1172,  770,  660,  660,
      660,  660, 1172, 1172,  660, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172,  660, 1172, 1172, 1172,  660,
     1172,  660,  660,  660, 1172, 1172, 1172, 1172,  660,  663,
      663,  663,  663, 1172, 1172,  663, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172,  663,  663, 1172, 1172, 1172,
      663, 1172,  663,  663,  663, 1172, 1172, 1172, 1172,  663,
      666, 1172, 1172, 1172, 1172,  666, 1172,  666,  666,  666,
     1172, 1172, 1172, 1172,  666,  668, 1172,  668,  668,  668,

     1172, 1172, 1172, 1172,  668,  774, 1172,  774, 1172, 1172,
     1172, 1172,  774, 1172,  774,  774,  774, 1172, 1172, 1172,
     1172,  774,  675, 1172,  675,  675,  675, 1172, 1172, 1172,
     1172,  675,  780, 1172, 1172, 1172, 1172,  780, 1172,  780,
      780,  780, 1172, 1172, 1172, 1172,  780,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791, 1172,  791,  791,  791,  791, 1172,
      791, 1172, 1172,  791,  791,  791,  791,  791,  791,  549,
     1172,  549,  549,  549, 1172, 1172, 1172, 1172,  549,  554,
     1172,  554,  554,  554, 1172, 1172, 1172, 1172,  554,  715,

      715, 1172,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  815, 1172, 1172,  815, 1172, 1172, 1172, 1172,  815,
     1172,  815,  815,  815,  311, 1172,  311, 1172,  311,  311,
     1172,  311, 1172, 1172, 1172,  311,  311, 1172,  311,  311,
      311,  724,  724, 1172,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  328, 1172, 1172,  328, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172,  328, 1172,  328,  328,  328,  738,
      738, 1172,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  742,  742,  742,  742,  742,  340, 1172, 1172,  340,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172,  340,  340,  340,
      340,  340,  304,  304, 1172,  304, 1172, 1172, 1172, 1172,
     1172, 1172, 1172,  304, 1172,  304,  304, 1172,  304,  304,

     1172, 1172,  304,  304, 1172,  304,  304,  304, 1172,  304,
      365, 1172, 1172, 1172, 1172, 1172,  365, 1172,  365,  365,
      365,  365,  365, 1172, 1172,  365,  365,  365,  365,  365,
      365, 1172, 1172, 1172, 1172,  365,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  397, 1172,
     1172, 1172, 1172, 1172,  397, 1172,  397,  397,  397,  397,
      397, 1172, 1172,  397,  397,  397,  397,  397,  397, 1172,
     1172, 1172, 1172,  397,  760,  760, 1172,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  409,  409, 1172, 1172,
     1172, 1172, 1172,  409, 1172,  409,  409,  409,  409,  409,
     1172,  409,  409,  409,  409,  409,  409,  409, 1172, 1172,
     1172, 1172,  409,  445, 1172, 1172, 1172, 1172, 1172,  445,
     1172,  445,  445,  445,  445,  445, 1172, 1172,  445,  445,
      445,  445,  445,  445, 1172, 1172, 1172, 1172,  445,  848,
     1172,  848,  848,  848, 1172, 1172, 1172, 1172,  848,  770,
      770,  770,  770, 1172, 1172,  770, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172,  770,  770, 1172, 1172, 1172,
      770, 1172,  770,  770,  770, 1172, 1172, 1172, 1172,  770,
      660,  660,  660,  660, 1172, 1172,  660, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172,  660, 1172, 1172,
     1172,  660, 1172,  660,  660,  660, 1172, 1172, 1172, 1172,
      660,  774, 1172,  774, 1172, 1172, 1172, 1172,  774, 1172,
      774,  774,  774, 1172, 1172, 1172, 1172,  774,  780, 1172,
     1172, 1172, 1172,  780, 1172,  780,  780,  780, 1172, 1172,
     1172, 1172,  780,  893,  893, 1172,  893, 1172, 1172, 1172,
     1172,  893, 1172,  893,  893,  893,  899,  899, 1172,  899,

      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
     1172,  827, 1172, 1172, 1172,  827,  827,  827,  827,  827,
      921,  921,  921,  921, 1172, 1172,  921, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172,  921,  921, 1172, 1172,
     1172,  921, 1172,  921,  921,  921, 1172, 1172, 1172, 1172,
      921,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946, 1172,  946,
      946,  946,  946, 1172,  946, 1172,  946, 1172,  946,  946,
      946,  946,  946,  973,  973, 1172,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1172, 1017, 1017, 1017, 1017, 1172, 1017, 1172,
     1172, 1172, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1172, 1018, 1018, 1018, 1018, 1172,
     1018, 1172, 1172, 1172, 1018, 1018, 1018, 1018, 1018, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1172, 1069, 1069, 1069,
     1069, 1172, 1069, 1172, 1172, 1172, 1069, 1069, 1069, 1069,
     1069, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1172, 1080,
     1080, 1080, 1080, 1172, 1080, 1172, 1172, 1172, 1080, 1080,
     1080, 1080, 1080,   85, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172
    } ;

static yyconst flex_int16_t yy_chk[9859] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,   21,   22,    4,   23,   21,
       22,   24,   23,  315,   47,   24,    4,    4,   35,    4,
        4,   36,   39,    4,    4,    4,   48,   40,   53,   35,

       53,   57,   36,   39,  100,  315,  117,  100,   40,   43,
       43,  117,   43,   58,   43,   39,   21,   22,  590,   23,
       40,   53,   24,   44,   44,   47,   44,  306,   44,   35,
      306,   63,   36,   39,   64,   81,   82,   48,   40,   53,
      590,  598,   57,    4,    5,    5,    5,    5,    5,    5,
        5,   43,    5,    5,   58,    5,    5,    5,   45,    5,
       45,    5,    5,  598,   75,   44,    5,    5,    5,   45,
       51,   51,   63,   51,   45,   64,   81,   82,   75, 1167,
       83,   45,   52,   52,   84,   52,    5,    5,    5,   83,
       83,  216,  307,   84,   84,   76,  216,  206,  259,   45,

      206,  307,  206,  259,   54,   75,   54,   89,   89,   76,
       89,  282,   51,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,   52,    6,    6,   54,    6,    6,
        6,   46,    6,   46,    6,    6,   76, 1165,  282,    6,
        6,    6,   46,   61,   55,   54,   55,   46,  526,   89,
      526,  264,   61,   61,   46,   93,  264,  109,  109,    6,
        6,    6,  109,  404,   93,  533,   61,   55,  127,  127,
      127,  127,   46,   93,  104,  127,  104,  104,  104,  533,
     1163,  404,  104,  109,   61,   55,    6,    6,    6,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,   13,   69,   13,   13,   62,   13,
       13,   13,   56,   13,   56,   13,   13,   62,   62,  233,
       13,   13,   13,  233,   70,   71,  565,   97,   69,   97,
       97,   62,   97,   97,   97,   56,  105,   72,   97,  105,
       13,   13,   13,  316,  879,  565,   69,   70,   71,   62,
      197,  105,  221,   56,  234,  221, 1160,  105,  879,  234,

       72,  197,  221,  234,  316,   70,   71,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   14,   72,   14,
       14,   77,   14,   14,   14,   78,   14,   88,   14,   14,
       88,  197,   77,   14,   14,   14,   78,   94,  334,   94,
       94,   94,   94,  101,   77,  105,  101,  334,   78,  312,
       94,   88,  312,   14,   14,   14,  118,  118,  318,  118,
      126,  126,   77,  126, 1157, 1156,   78,  101,   94,   88,
      319,  373,  110,  110,  321,  349,  373,  110,  349,  318,
       14,   14,   14,   14,   15,   15,   15,   15,   15,   15,
       15,  319,   15,   15,  321,   15,   15,   15,  110,   15,

      118,   15,   15, 1152,  126,  593,   15,   15,   15,  102,
      227,  227,  102,  227,  322,  102,  120,  120,  120,  120,
      121,  121,  121,  121,  102,  593,   15,   15,   15, 1149,
      102,  354,  120,  102,  354,  322,  121,  120,  131,  131,
      561,  121,  333,  131,  580,  132,  132,  580,  153,  153,
      132,  153,  227,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,  131,   16,   16,  561,   16,   16,
       16,  132,   16,  327,   16,   16,  333, 1126,  102,   16,
       16,   16,  103,  103,  595,  103,  125,  125,  125,  125,
     1126,  314,  153,  103,  327,  103,  103,  103,  103,   16,

       16,   16,  125,  333,  595,  646,  103,  125,  125,  149,
      149,  149,  149,  314,  314,  314,  149,  375,  181,  181,
      181,  181,  375,  646,  103,  181,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   25,   25,
       25,   25,   25,   25,   25,  340,   25,   25,  340,   25,
       25,   25,  933,   25,  224,   25,   25,  224,  549,  599,

       25,   25,   25,  549,  224,  351,  351,  933,  351,  122,
      122,  122,  122,  551,  157,  157,  122,  157,  551,  599,
       25,   25,   25,  111,  111,  122,  111,  340,  161,  161,
      122,  161,  352,  238,  352,  352,  352,  238, 1148,  111,
      111,  554,  317,  238,  111,  238,  554,   25,   25,   25,
       25,   26,   26,   26,   26,   26,   26,   26,  157,   26,
       26,  317,   26,   26,   26,  111,   26,  111,   26,   26,
      138, 1147,  161,   26,   26,   26,  143,  143,  143,  143,
      122,  138,  138,  317,  165,  165,  138,  604,  138,  165,
      604,  556,  143,   26,   26,   26,  556,  143,  144,  144,

      144,  144,  357,  357, 1146,  357,  339,  138,  339,  339,
      165,  339,  339,  339,  144,  368,  368,  339,  368,  144,
       26,   26,   26,   26,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  172,  172,   49,  172,  875,  600,
       49,   49,   49,   49, 1162,  875,  720,  123,  123,  123,

      123, 1162, 1145,  723,  123,  148,  148,  148,  148,  600,
       49,   49,   49,  123,  428,  148,  720,  428,  123,  180,
      180,  148,  180,  723,  428, 1166,  148,  342,  172, 1166,
      342,  502,  186,  186,  502,  186,  502,   49,   49,   49,
       49,   49,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,  134,  134,
       50,  134, 1144,  180,   50,   50,   50,   50,  123,  342,
     1140,  139,  166,  166,  134,  134,  186,  166,  594,  134,
     1154,  594,  139,  139,   50,   50,   50,  139,  239,  139,
      342,  377,  377,  239,  377, 1154,  607,  239,  166,  607,

      134,  594,  134,  239, 1139,  239,  389,  389,  139,  389,
     1137,   50,   50,   50,   50,   50,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   95, 1136,  863,  140,
      145,  145,  145,  145, 1135,  189,  189,  145,  189,   95,

      140,  140, 1134,  726,  863,  140,  145,  140,  366,   95,
       95,  145,  366,  359,   95,   95,  359,  610,   95,   95,
      610,   95,   95,  726,  297,  297,  140,  297,  344,   95,
       95,  344, 1133,  366,   95,   95, 1132,  359,  728,  189,
       95,   95,   95,   95,   95,   95,   96,   96,   96,   96,
      609,  142,  142,  609,  142,   96,  142,  192,  192,  728,
      192,  145,   96,   96,   96,  610,  297,  142,  142,  398,
      344,  410,  142,  398,  142,  410,  146,  146,  146,  146,
     1142,  294,   96,  146,  294,  344,   96, 1131,   96,   96,
       96, 1142,  146,  142,  398,  142,  410,  146,  824, 1130,

      616,  192,   96,  616,  341,  294,   96,  341,   96,  609,
       96,   96,   98,   98,   98,   98,  167,  167,  824,  167,
     1106,   98, 1106,  294,  171,  171,  171,  171,   98,   98,
       98,  171,  167,  167, 1129,  365,  365,  167,  201,  201,
      365,  201,  171,  171,  171,  171,  341,  146,   98,  616,
       98,  491,   98, 1121,   98,   98,   98, 1169,  167,  341,
      167,  365,  491,  174,  174,  174,  174, 1120,   98, 1118,
      298,  298,   98,  298,   98, 1169,   98,   98,   99,  174,
      201,   99,  201, 1117,  174,  175,  175,  175,  175, 1116,
       99,   99,  491,   99,   99,  367,  367,   99,   99,   99,

      367,  175,   99, 1115, 1114, 1113,  175,  176,  176,  176,
      176, 1112,  298, 1111,  176,  177,  177,  177,  177, 1110,
       99,  367,  177,  176,  179,  179,  179,  179,  176,  219,
      219,  177,  219,  713,  343,  346,  177,  343,  346, 1109,
      179,  225,  225,  350,  225,  179,  350,   99,  137,  137,
     1100,  137,  137,  137,  137, 1099,  137,  137,  350,  137,
      137,  137, 1086,  137,  350,  137,  137,  713, 1085, 1083,
      137,  137,  137,  219, 1082, 1076,  343,  346,  176,  200,
      200,  200,  200,  343,  346,  225,  177, 1075, 1074, 1073,
      137,  137,  137,  346,  713,  200,  200,  200,  242,  242,

     1072,  242,  246,  246, 1071,  246,  252,  252, 1070,  252,
      255,  255,  350,  255, 1068,  200, 1042,  137,  137,  137,
      137,  345,  320,  347,  345,  320,  347,  360,  345,  360,
      360,  360, 1041,  400,  400,  360,  400, 1040,  353, 1039,
      614,  353,  242,  614,  200,  320,  246,  320,  627,  355,
      252,  627,  355,  353,  255,  295,  295,  295,  295,  353,
      320, 1038,  345,  345,  355,  347,  361,  320, 1037,  361,
      355,  295,  295,  295,  596,  362, 1036,  596,  362,  397,
      397,  361,  320,  347,  397,  356,  356,  361,  356,  345,
      362,  295,  388,  388,  388,  388,  362,  596,  295,  295,

      356,  614, 1035,  370,  370,  397,  356,  353,  370,  356,
      380,  380,  380,  380, 1034, 1033, 1032,  295,  355,  295,
      295,  296,  296,  296,  296, 1031,  380,  399,  399,  370,
     1030,  380,  399,  413,  413,  361,  413,  296,  296,  296,
      430,  430,  370,  430,  362,  381,  381,  381,  381, 1029,
     1028, 1027,  381,  399,  356,  435,  435,  296,  435,  440,
      440,  381,  440,  446,  296,  296,  381,  446,  383,  383,
      383,  383, 1026,  448,  448,  383,  448,  457,  457,  633,
      457, 1025,  633,  296,  383,  296,  296,  310,  446,  383,
      310, 1024,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310, 1023, 1022, 1020,  310,
      310,  310,  310, 1019,  468,  468,  381,  468, 1015,  384,
      384,  384,  384, 1014, 1013,  385,  385,  385,  385,  310,
      310,  310,  385,  477,  477,  384,  477, 1012, 1011,  383,
      384,  384,  392,  392,  392,  392, 1010, 1009, 1008,  392,
      402,  402, 1007, 1006, 1005,  402,  310,  310,  310,  310,
      310,  328,  482,  482,  328,  482, 1003,  328,  328,  328,
      328,  386,  386,  386,  386, 1002,  402, 1001,  386,  387,
      387,  387,  387,  328,  328,  328, 1000,  386,  999,  402,
      486,  486,  386,  486,  998,  387,  997,  409,  996,  608,

      387,  387,  608,  328,  393,  393,  393,  393,  409,  409,
      411,  393,  995,  409,  994,  409,  421,  421,  421,  421,
      993,  411,  411,  421,  497,  497,  411,  497,  411,  328,
      991,  328,  328,  348,  409,  990,  348,  452,  452,  452,
      452,  989,  386,  986,  415,  348,  348,  411,  348,  348,
      608,  985,  348,  348,  348,  415,  415,  348,  452,  976,
      415,  975,  415,  416,  416,  416,  416,  417,  417,  417,
      417,  445,  445,  973,  417,  348,  445,  512,  512,  416,
      512,  415,  615,  417,  416,  615,  972,  971,  417,  419,
      419,  419,  419,  970,  415,  969,  419,  445,  518,  518,

      968,  518,  348,  405,  405,  419,  405,  405,  405,  405,
      419,  405,  405,  967,  405,  405,  405,  966,  405,  515,
      405,  405,  515,  965,  964,  405,  405,  405,  707,  515,
      615,  707,  420,  420,  420,  420,  535,  535,  417,  535,
      539,  539,  420,  539,  963,  405,  405,  405,  420,  426,
      426,  426,  426,  420,  521,  521,  426,  521,  517,  962,
      419,  517,  422,  422,  422,  422,  447,  447,  517,  422,
      961,  447,  405,  405,  405,  405,  406,  406,  422,  406,
      406,  406,  406,  422,  406,  406,  960,  406,  406,  406,
      959,  406,  447,  406,  406,  958,  521,  957,  406,  406,

      406,  423,  423,  423,  423,  425,  425,  425,  425,  543,
      543,  423,  543,  546,  546,  425,  546,  423,  406,  406,
      406,  425,  423,  956,  955,  954,  425,  427,  427,  427,
      427,  450,  450,  422,  427,  952,  450,  465,  465,  465,
      465,  950,  947,  945,  465,  406,  406,  406,  406,  652,
      944,  943,  652,  451,  451,  451,  451,  450,  942,  652,
      451,  454,  454,  454,  454,  941,  718,  940,  454,  718,
      450,  451,  451,  451,  451,  460,  460,  460,  460,  454,
      454,  454,  454,  456,  456,  456,  456,  939,  938,  937,
      456,  460,  461,  461,  461,  461,  460,  653,  936,  461,

      653,  456,  456,  456,  456,  935,  934,  653,  461,  463,
      463,  463,  463,  461,  932,  931,  463,  464,  464,  464,
      464,  466,  466,  466,  466,  463,  930,  929,  466,  605,
      463,  619,  605,  464,  619,  928,  605,  466,  464,  927,
      926,  924,  466,  467,  467,  467,  467,  471,  471,  471,
      471,  923,  922,  918,  471,  472,  472,  472,  472,  467,
      917,  916,  472,  461,  467,  628,  913,  628,  628,  628,
      605,  620,  621,  619,  620,  621,  912,  902,  622,  623,
      463,  622,  623,  625,  619,  624,  625,  689,  624,  901,
      689,  732,  466,  585,  732,  899,  585,  605,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  896,  620,  621,  585,  585,  585,  585,  895,
      622,  623,  620,  893,  892,  625,  622,  624,  891,  890,
      889,  621,  625,  624,  888,  585,  585,  585,  626,  626,
      623,  626,  887,  886,  689,  725,  629,  629,  725,  629,
      885,  634,  634,  626,  631,  631,  634,  631,  884,  626,
      883,  629,  585,  585,  585,  585,  585,  629,  725,  631,
      632,  632,  882,  632,  881,  631,  880,  634,  631,  635,
      635,  878,  636,  636,  635,  632,  736,  636,  877,  736,
      876,  632,  874,  639,  639,  639,  639,  640,  640,  640,

      640,  643,  643,  873,  872,  635,  643,  626,  636,  644,
      644,  871,  645,  645,  644,  629,  639,  645,  737,  636,
      640,  737,  808,  631,  870,  808,  869,  643,  868,  648,
      828,  657,  657,  828,  865,  644,  657,  865,  645,  632,
      648,  648,  867,  658,  658,  648,  736,  648,  658,  645,
      647,  647,  866,  647,  647,  647,  647,  657,  647,  647,
      864,  647,  647,  647,  649,  647,  648,  647,  647,  658,
      862,  737,  647,  647,  647,  649,  649,  861,  860,  650,
      649,  727,  649,  717,  727,  717,  739,  717,  717,  739,
      650,  650,  647,  647,  647,  650,  717,  650,  659,  659,

      859,  649,  740,  659,  727,  740,  741,  858,  857,  741,
      660,  660,  660,  660,  856,  832,  650,  660,  832,  647,
      647,  647,  647,  953,  659,  855,  953,  650,  660,  660,
      660,  660,  854,  853,  852,  659,  661,  661,  661,  661,
      851,  850,  849,  661,  662,  662,  662,  662,  739,  846,
      845,  662,  663,  663,  663,  663,  741,  661, 1084,  663,
      740, 1084,  662,  662,  662,  662, 1138,  844,  832, 1138,
      663,  663,  663,  663,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  743,  821,
      746,  743,  821,  746,  755,  755,  755,  755,  841,  977,
      753,  753,  977,  750,  750,  753,  750,  751,  751,  840,
      751, 1151,  821,  831, 1151,  826,  822,  755,  750,  822,
     1153,  825,  751, 1153,  750,  820,  753,  819,  751,  818,
      743,  745,  746,  747,  745,  748,  747,  749,  748,  822,

      749,  753,  815,  746,  977,  743,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  750,  745,  813,  747,  751,  748,  812,  749,
      830,  752,  752,  830,  752,  811,  810,  749,  744,  744,
      744,  745,  809,  748,  807,  747,  752,  757,  757,  757,
      757,  806,  752,  759,  759,  752,  767,  767,  759,  829,
     1104,  767,  829, 1104,  805,  744,  744,  744,  744,  744,
      757,  816,  804,  816,  762,  816,  816,  803,  833,  759,
      836,  833,  767,  836,  816,  762,  762,  830,  904,  802,

      762,  904,  762,  903,  759, 1158,  903,  767, 1158,  801,
      752,  760,  760,  800,  760,  760,  760,  760,  829,  760,
      760,  762,  760,  760,  760,  799,  760, 1104,  760,  760,
      833,  798,  836,  760,  760,  760,  762,  833,  769,  769,
      769,  769,  797,  839,  839,  769,  796,  836,  839,  835,
      903,  794,  835,  760,  760,  760,  769,  769,  769,  769,
      904,  978,  793,  792,  978,  771,  771,  771,  771,  839,
     1125,  897,  771, 1125,  897,  907,  839,  790,  907,  789,
      760,  760,  760,  760,  761,  761,  771,  761,  761,  761,
      761,  835,  761,  761,  897,  761,  761,  761,  835,  761,

      979,  761,  761,  979,  788,  787,  761,  761,  761,  786,
      978,  770,  770,  770,  770, 1125,  900,  907,  770,  900,
      785,  907,  838,  838,  783,  838,  761,  761,  761,  770,
      770,  770,  770,  784,  784,  782,  781,  838,  784,  900,
      779,  784,  784,  838,  837,  906,  784,  837,  906,  979,
      784,  778,  784,  761,  761,  761,  761,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  842,  842,  777,  837,  776,  842,  775,
      908,  838,  974,  908,  843,  974,  774,  837,  773,  834,

      834,  834,  772,  766,  765,  843,  843,  906,  909,  842,
      843,  909,  843,  847,  847,  974,  842,  910,  847,  764,
      910,  981, 1043,  758,  981, 1043,  834,  834,  834,  834,
      834,  843,  908,  848,  848,  848,  848,  908,  843,  847,
      848,  980,  911,  911,  980, 1141,  847,  911, 1141,  754,
      909,  848,  848,  848,  848,  914,  914,  742, 1161,  910,
      914, 1161,  915,  981,  919,  919,  981,  738,  911,  919,
      909,  730,  911,  915,  915,  729,  724,  722,  915,  910,
      915,  914,  721,  980, 1043,  914,  920,  920,  920,  920,
      919,  715,  714,  920,  919,  921,  921,  921,  921,  915,

     1141,  980,  921,  915,  920,  920,  920,  920,  982,  983,
      712,  982,  983,  921,  921,  921,  921,  984,  984,  987,
      987,  711,  984,  988,  987, 1044,  992,  992, 1044, 1047,
     1045,  992, 1047, 1045,  988,  988,  710, 1046, 1046,  988,
     1046,  988,  708,  984, 1164,  987, 1048, 1164,  706, 1048,
      982,  983,  992, 1049, 1050, 1050, 1049,  982,  983, 1050,
      988,  984,  705,  987, 1053, 1053,  701,  699,  697, 1053,
      992, 1047, 1058, 1058,  696,  695,  694, 1058,  988, 1046,
     1050, 1054,  693,  692, 1103, 1044, 1045, 1103, 1048,  691,
     1053, 1047, 1054, 1054,  690, 1049,  688, 1054, 1058, 1054,

     1105, 1105, 1107, 1105, 1108, 1107, 1048, 1108, 1124, 1049,
     1127, 1124, 1128, 1127,  687, 1128, 1168, 1143, 1054, 1168,
     1143, 1155, 1171, 1171, 1155, 1171, 1265,  686, 1265, 1265,
     1265, 1328,  685, 1103, 1328, 1328, 1339,  684, 1339, 1339,
     1339,  683, 1105,  682, 1107, 1342, 1108, 1342, 1342, 1342,
      681, 1107, 1127,  680, 1128,  679, 1124, 1128, 1127, 1143,
      678, 1108,  677, 1155, 1171, 1343,  676, 1343, 1343, 1343,
      673,  672, 1143, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,

     1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180,

     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,

     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1198, 1198,  671, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,

     1198, 1198, 1198, 1198, 1198, 1199, 1370,  670,  669, 1370,
     1370, 1375,  668, 1375, 1375, 1375,  665,  664,  656,  655,
     1199,  654, 1199, 1199, 1199,  651,  642,  641,  638, 1199,
     1200,  603, 1200, 1200,  602, 1200,  601,  592,  591, 1200,
     1200,  589, 1200, 1200, 1200, 1201,  587, 1201, 1201, 1201,
     1201,  586, 1201,  584,  581,  579, 1201, 1201, 1201, 1201,
     1201, 1201, 1202, 1202, 1202,  577,  576,  575,  573,  571,
     1202,  569,  566,  563,  560, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202,  558, 1202, 1202, 1203,  557, 1203,
     1203,  555, 1203,  553,  552,  550, 1203, 1203,  548, 1203,

     1203, 1203, 1204, 1204, 1204,  545,  541,  537,  534,  532,
     1204,  531,  530,  528,  527, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204,  524, 1204, 1204, 1205, 1205,  523,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206,
      520,  514,  511,  510,  506, 1206,  504, 1206, 1206, 1206,
     1206, 1206,  503,  501, 1206, 1206, 1206, 1206, 1206, 1206,
      499,  496,  494,  493, 1206, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,

     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208,  490, 1208,
     1208, 1208,  488,  484,  481,  480, 1208, 1209,  479, 1209,
     1209,  476,  475,  474, 1209,  470, 1209, 1209, 1209,  462,
      459,  455,  443, 1209, 1210, 1210, 1210, 1210,  442,  438,
     1210,  437,  433,  432,  418,  412,  407,  403, 1210,  395,
      394, 1210,  391,  382,  379, 1210,  376, 1210, 1210, 1210,
      374,  371,  363, 1210, 1210, 1211, 1211, 1211, 1211,  335,
      332,  331,  330,  329,  326,  324,  323,  313,  311, 1211,
      304, 1211, 1211, 1211,  303,  300, 1211,  299, 1211, 1211,

     1211,  289,  286,  281,  277, 1211, 1212, 1212, 1212, 1212,
      276,  273, 1212,  269,  268,  265,  260,  229,  215,  214,
      213,  209,  208,  204,  199,  196,  188, 1212,  185, 1212,
     1212, 1212,  178,  164,  160,  156, 1212, 1213, 1213,  147,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
      133,  130,  124,  112,  108, 1214,   92, 1214, 1214, 1214,
     1214, 1214,   91,   90, 1214, 1214, 1214, 1214, 1214, 1214,
       85,    8,    7,    0, 1214, 1215, 1215,    0, 1215, 1215,

     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216, 1216,    0,
        0,    0,    0,    0, 1216,    0, 1216, 1216, 1216, 1216,
     1216,    0, 1216, 1216, 1216, 1216, 1216, 1216, 1216,    0,
        0,    0,    0, 1216, 1217, 1217, 1217, 1217,    0,    0,
     1217,    0,    0,    0,    0,    0,    0,    0, 1217,    0,
        0, 1217,    0,    0,    0, 1217,    0, 1217, 1217, 1217,
        0,    0,    0, 1217, 1217, 1218, 1218, 1218, 1218,    0,
        0,    0,    0, 1218,    0,    0,    0,    0,    0, 1218,

        0, 1218, 1218,    0,    0,    0, 1218,    0, 1218, 1218,
     1218,    0,    0,    0,    0, 1218, 1219, 1219, 1219, 1219,
        0,    0, 1219,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1219,    0, 1219,
     1219, 1219,    0,    0,    0,    0, 1219, 1220,    0,    0,
     1220,    0,    0,    0,    0, 1220,    0, 1220, 1220, 1220,
        0,    0,    0,    0, 1220, 1221, 1221,    0, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1222, 1222,    0,

     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,
     1223,    0, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1224,    0,    0,    0,    0,    0, 1224,    0, 1224,
     1224, 1224, 1224, 1224,    0,    0, 1224, 1224, 1224, 1224,
     1224, 1224,    0,    0,    0,    0, 1224, 1225,    0, 1225,
     1225, 1225,    0,    0,    0,    0, 1225, 1226, 1226, 1226,

     1226,    0,    0, 1226,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1226, 1226,    0,    0,    0, 1226,    0,
     1226, 1226, 1226,    0,    0,    0,    0, 1226, 1227, 1227,
     1227, 1227,    0,    0, 1227,    0,    0,    0,    0,    0,
        0,    0, 1227,    0,    0, 1227,    0,    0,    0, 1227,
        0, 1227, 1227, 1227,    0,    0,    0, 1227, 1227, 1228,
     1228, 1228, 1228,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1228,    0, 1228, 1228,    0,    0,    0,
     1228,    0, 1228, 1228, 1228,    0,    0,    0,    0, 1228,
     1229, 1229, 1229, 1229,    0,    0, 1229,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1229,    0, 1229, 1229, 1229,    0,    0,    0,    0,
     1229, 1230,    0, 1230, 1230, 1230,    0,    0,    0,    0,
     1230, 1231,    0, 1231,    0,    0,    0,    0, 1231,    0,
     1231, 1231, 1231,    0,    0,    0,    0, 1231, 1232, 1232,
        0, 1232,    0,    0,    0,    0, 1232,    0, 1232, 1232,
     1232,    0,    0,    0,    0, 1232, 1233, 1233,    0, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233,    0, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,    0,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,    0,

        0, 1234,    0,    0,    0,    0, 1234,    0, 1234, 1234,
     1234,    0,    0,    0,    0, 1234, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235,    0, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236, 1236,
        0, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,    0,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1237, 1237,    0, 1237,    0, 1237, 1237, 1237,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1237, 1237,

     1237,    0, 1237, 1237,    0,    0,    0,    0,    0, 1237,
     1238,    0,    0, 1238,    0,    0,    0,    0, 1238,    0,
     1238, 1238, 1238,    0,    0,    0,    0, 1238, 1239, 1239,
        0, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1240, 1240,    0, 1240,    0, 1240, 1240, 1240, 1240, 1240,
     1240,    0, 1240, 1240, 1240, 1240,    0, 1240, 1240, 1240,
     1240,    0, 1240,    0, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1241,    0,    0, 1241,    0,    0,    0,    0,

     1241,    0,    0,    0,    0, 1241, 1241,    0, 1241,    0,
        0,    0,    0, 1241,    0, 1241, 1241, 1241, 1242, 1242,
        0, 1242,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,    0,
     1242,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1243, 1243,    0, 1243,    0, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243,    0, 1243,    0, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1244,    0,    0, 1244,    0,    0,    0,    0,
     1244,    0, 1244, 1244, 1244,    0,    0,    0,    0, 1244,

     1245, 1245,    0, 1245, 1245, 1245, 1245, 1245, 1245,    0,
        0, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245,    0, 1245,    0, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1246,    0, 1246, 1246, 1246,    0,    0,    0,
        0, 1246, 1247,    0, 1247, 1247,    0,    0,    0, 1247,
        0, 1247, 1247, 1247,    0,    0,    0,    0, 1247, 1248,
        0, 1248, 1248, 1248,    0,    0,    0,    0, 1248, 1249,
        0, 1249, 1249,    0,    0,    0, 1249,    0, 1249, 1249,
     1249,    0,    0,    0,    0, 1249, 1250, 1250,    0, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,

     1250, 1250, 1250, 1250, 1250, 1250, 1250,    0, 1250,    0,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1251,    0,
        0, 1251,    0,    0,    0,    0, 1251,    0, 1251, 1251,
     1251,    0,    0,    0,    0, 1251, 1252, 1252,    0, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
        0, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,    0,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253, 1253,
        0, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,    0,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,    0,
     1253,    0, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1254,    0, 1254, 1254, 1254,    0,    0,    0, 1254,    0,
     1254, 1254, 1254,    0,    0,    0,    0, 1254, 1255, 1255,
        0, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255,    0, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,    0,
        0, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1257, 1257, 1257,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1257, 1257, 1257, 1257, 1257,

     1257, 1257, 1257, 1257,    0, 1257, 1257, 1258, 1258,    0,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259,
        0, 1259, 1259, 1259,    0,    0,    0,    0, 1259, 1260,
     1260,    0,    0,    0, 1260,    0, 1260, 1260, 1260,    0,
        0,    0,    0, 1260, 1261,    0, 1261, 1261,    0, 1261,
        0,    0,    0, 1261, 1261,    0, 1261, 1261, 1261, 1262,
        0,    0, 1262,    0,    0,    0,    0, 1262,    0, 1262,
     1262, 1262, 1263,    0,    0, 1263,    0, 1263, 1263, 1263,

     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1264,    0, 1264, 1264, 1264,    0,
        0,    0, 1264, 1266,    0, 1266, 1266,    0, 1266,    0,
        0,    0, 1266, 1266,    0, 1266, 1266, 1266, 1267,    0,
        0, 1267,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1267,
     1267, 1267, 1267, 1267, 1268, 1268,    0, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1269,    0,    0,    0,
        0,    0, 1269,    0, 1269, 1269, 1269, 1269, 1269,    0,
        0, 1269, 1269, 1269, 1269, 1269, 1269,    0,    0,    0,
        0, 1269, 1270,    0,    0,    0,    0,    0, 1270,    0,
     1270,    0, 1270, 1270, 1270,    0,    0, 1270, 1270, 1270,
     1270, 1270, 1270,    0,    0,    0,    0, 1270, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1272,    0, 1272, 1272,    0,    0,    0, 1272,    0, 1272,

     1272, 1272,    0,    0,    0,    0, 1272, 1273,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1273,    0, 1273, 1273, 1273,    0,    0,    0,
        0, 1273, 1274, 1274, 1274, 1274,    0,    0, 1274,    0,
        0,    0,    0,    0,    0,    0, 1274,    0,    0, 1274,
        0,    0,    0, 1274,    0, 1274, 1274, 1274,    0,    0,
        0, 1274, 1274, 1275, 1275, 1275, 1275,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1275,    0, 1275,
     1275, 1275,    0,    0, 1275,    0, 1275, 1275, 1275,    0,
        0,    0,    0, 1275, 1276, 1276, 1276, 1276,    0,    0,

     1276,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1276,    0, 1276, 1276, 1276,
        0,    0,    0,    0, 1276, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277,    0, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1278,    0, 1278,
        0,    0, 1278,    0, 1278, 1278, 1278,    0,    0,    0,
        0, 1278, 1279, 1279,    0, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,

     1279, 1279, 1279, 1279, 1280,    0,    0,    0,    0,    0,
     1280,    0, 1280, 1280, 1280, 1280, 1280,    0,    0, 1280,
     1280, 1280, 1280, 1280, 1280,    0,    0,    0,    0, 1280,
     1281,    0,    0,    0,    0,    0, 1281,    0, 1281,    0,
     1281, 1281, 1281,    0,    0, 1281, 1281, 1281, 1281, 1281,
     1281,    0,    0,    0,    0, 1281, 1282, 1282,    0, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1283, 1283,
        0, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,

     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1284, 1284,    0,    0,    0,    0,    0, 1284,    0, 1284,
     1284, 1284, 1284, 1284,    0, 1284, 1284, 1284, 1284, 1284,
     1284, 1284,    0,    0,    0,    0, 1284, 1285,    0,    0,
        0,    0,    0, 1285,    0, 1285,    0, 1285, 1285, 1285,
        0,    0, 1285, 1285, 1285, 1285, 1285, 1285,    0,    0,
        0,    0, 1285, 1286, 1286, 1286, 1286,    0,    0, 1286,
        0,    0,    0,    0,    0,    0,    0, 1286,    0,    0,
     1286,    0,    0,    0, 1286,    0, 1286, 1286, 1286,    0,

        0,    0, 1286, 1286, 1287, 1287, 1287, 1287,    0,    0,
        0,    0, 1287,    0,    0,    0,    0,    0, 1287,    0,
     1287, 1287,    0,    0,    0, 1287,    0, 1287, 1287, 1287,
        0,    0,    0,    0, 1287, 1288, 1288, 1288, 1288,    0,
        0, 1288,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1288,    0, 1288, 1288,
     1288,    0,    0,    0,    0, 1288, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289,    0, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290,    0,

        0, 1290,    0,    0,    0,    0, 1290,    0,    0,    0,
        0,    0,    0,    0, 1290,    0,    0,    0,    0, 1290,
        0, 1290, 1290, 1290,    0,    0,    0,    0, 1290, 1291,
        0,    0, 1291,    0,    0,    0,    0, 1291,    0, 1291,
     1291, 1291,    0,    0,    0,    0, 1291, 1292, 1292,    0,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293,
     1293,    0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,

     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1294, 1294,    0, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1295,    0,    0,    0,    0,    0, 1295,
        0, 1295, 1295, 1295, 1295, 1295,    0,    0, 1295, 1295,
     1295, 1295, 1295, 1295,    0,    0,    0,    0, 1295, 1296,
        0,    0,    0,    0,    0, 1296,    0, 1296,    0, 1296,
     1296, 1296,    0,    0, 1296, 1296, 1296, 1296, 1296, 1296,
        0,    0,    0,    0, 1296, 1297, 1297, 1297, 1297,    0,

        0, 1297,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1297, 1297,    0,    0,    0, 1297,    0, 1297, 1297,
     1297,    0,    0,    0,    0, 1297, 1298,    0, 1298, 1298,
     1298,    0,    0,    0,    0, 1298, 1299, 1299, 1299, 1299,
        0,    0, 1299,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1299, 1299,    0,    0,    0, 1299,    0, 1299,
     1299, 1299,    0,    0,    0,    0, 1299, 1300, 1300, 1300,
     1300,    0,    0, 1300,    0,    0,    0,    0,    0,    0,
        0, 1300,    0,    0, 1300,    0,    0,    0, 1300,    0,
     1300, 1300, 1300,    0,    0,    0, 1300, 1300, 1301, 1301,

     1301, 1301,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1301,    0, 1301, 1301,    0,    0,    0, 1301,
        0, 1301, 1301, 1301,    0,    0,    0,    0, 1301, 1302,
     1302, 1302, 1302,    0,    0, 1302,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1302,    0, 1302, 1302, 1302,    0,    0,    0,    0, 1302,
     1303,    0,    0,    0,    0, 1303,    0, 1303, 1303, 1303,
        0,    0,    0,    0, 1303, 1304,    0, 1304,    0,    0,
        0,    0, 1304,    0, 1304, 1304, 1304,    0,    0,    0,
        0, 1304, 1305,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1305,    0, 1305,
     1305, 1305,    0,    0,    0,    0, 1305, 1306, 1306,    0,
     1306,    0,    0,    0,    0, 1306,    0, 1306, 1306, 1306,
        0,    0,    0,    0, 1306, 1307, 1307,    0, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307,    0, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,    0, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,    0,    0,
     1308,    0,    0,    0,    0, 1308,    0, 1308, 1308, 1308,
        0,    0,    0,    0, 1308, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,

     1309, 1309, 1309, 1309, 1309, 1309,    0, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310, 1310,    0,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,    0, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1311,    0, 1311, 1311, 1311,    0,
        0,    0,    0, 1311, 1312,    0,    0, 1312,    0,    0,
        0,    0, 1312,    0, 1312, 1312, 1312,    0,    0,    0,
        0, 1312, 1313, 1313,    0, 1313, 1313, 1313, 1313, 1313,

     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1314, 1314,    0, 1314,    0, 1314,
     1314, 1314, 1314, 1314, 1314,    0, 1314, 1314, 1314, 1314,
        0, 1314, 1314, 1314, 1314,    0, 1314,    0, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1315,    0,    0, 1315,
        0,    0,    0,    0, 1315,    0,    0,    0,    0, 1315,
     1315,    0, 1315,    0,    0,    0,    0, 1315,    0, 1315,
     1315, 1315, 1316, 1316,    0, 1316,    0, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,

     1316, 1316, 1316,    0, 1316,    0, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1317, 1317,    0, 1317,    0, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317,    0, 1317,    0, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1318,    0,    0, 1318,
        0,    0,    0,    0, 1318,    0, 1318, 1318, 1318,    0,
        0,    0,    0, 1318, 1319, 1319,    0, 1319, 1319, 1319,
     1319, 1319, 1319,    0,    0, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319,    0, 1319,    0, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1320,    0, 1320, 1320,

        0,    0,    0, 1320,    0, 1320, 1320, 1320,    0,    0,
        0,    0, 1320, 1321,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1321,    0,
     1321, 1321, 1321,    0,    0,    0,    0, 1321, 1322,    0,
     1322, 1322,    0,    0,    0, 1322,    0, 1322, 1322, 1322,
        0,    0,    0,    0, 1322, 1323,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1323,    0, 1323, 1323, 1323,    0,    0,    0,    0, 1323,
     1324, 1324,    0, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,

     1324,    0, 1324,    0, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1325,    0,    0, 1325,    0,    0,    0,    0,
     1325,    0, 1325, 1325, 1325,    0,    0,    0,    0, 1325,
     1326, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,    0, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1327, 1327,    0, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327,    0, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327,    0, 1327,    0, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1329,    0, 1329, 1329, 1329,    0,

        0,    0, 1329,    0, 1329, 1329, 1329,    0,    0,    0,
        0, 1329, 1330, 1330,    0, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330,    0, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331,    0,    0, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332,    0,    0,
        0, 1332,    0, 1332, 1332, 1332,    0,    0,    0,    0,
     1332, 1333, 1333,    0, 1333, 1333, 1333, 1333,    0, 1333,

     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1334, 1334,    0, 1334,    0,    0,    0,
        0, 1334,    0, 1334, 1334, 1334, 1335,    0, 1335, 1335,
        0, 1335,    0,    0,    0, 1335, 1335,    0, 1335, 1335,
     1335, 1336,    0,    0, 1336,    0, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1337, 1337,    0, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,

     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1338,    0,    0, 1338,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1338,    0, 1338, 1338,
     1338, 1340,    0,    0, 1340,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1340,    0, 1340, 1340, 1340, 1341, 1341,    0,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341,    0, 1341, 1341, 1344,

        0,    0, 1344,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1344, 1344, 1344, 1344, 1344, 1345,    0,    0,    0,    0,
        0, 1345,    0, 1345, 1345, 1345, 1345, 1345,    0,    0,
     1345, 1345, 1345, 1345, 1345, 1345,    0,    0,    0,    0,
     1345, 1346,    0,    0,    0,    0,    0, 1346,    0, 1346,
     1346, 1346, 1346, 1346,    0,    0, 1346, 1346, 1346, 1346,
     1346, 1346,    0,    0,    0,    0, 1346, 1347,    0, 1347,
     1347, 1347,    0,    0,    0,    0, 1347, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349,
        0, 1349,    0,    0, 1349,    0, 1349, 1349, 1349,    0,
        0,    0,    0, 1349, 1350,    0,    0,    0,    0,    0,
     1350,    0, 1350, 1350, 1350, 1350, 1350,    0,    0, 1350,
     1350, 1350, 1350, 1350, 1350,    0,    0,    0,    0, 1350,
     1351,    0,    0,    0,    0,    0, 1351,    0, 1351, 1351,
     1351, 1351, 1351,    0,    0, 1351, 1351, 1351, 1351, 1351,
     1351,    0,    0,    0,    0, 1351, 1352, 1352,    0, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353,
        0,    0,    0,    0,    0, 1353,    0, 1353, 1353, 1353,
     1353, 1353,    0, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
        0,    0,    0,    0, 1353, 1354, 1354,    0,    0,    0,
        0,    0, 1354,    0, 1354, 1354, 1354, 1354, 1354,    0,
     1354, 1354, 1354, 1354, 1354, 1354, 1354,    0,    0,    0,
        0, 1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1355, 1355, 1356,    0,    0, 1356,    0,    0,
        0,    0, 1356,    0,    0,    0,    0,    0,    0,    0,
     1356,    0,    0,    0,    0, 1356,    0, 1356, 1356, 1356,
        0,    0,    0,    0, 1356, 1357,    0,    0,    0,    0,
        0, 1357,    0, 1357, 1357, 1357, 1357, 1357,    0,    0,
     1357, 1357, 1357, 1357, 1357, 1357,    0,    0,    0,    0,
     1357, 1358,    0,    0,    0,    0,    0, 1358,    0, 1358,
     1358, 1358, 1358, 1358,    0,    0, 1358, 1358, 1358, 1358,
     1358, 1358,    0,    0,    0,    0, 1358, 1359, 1359, 1359,
     1359,    0,    0, 1359,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1359, 1359,    0,    0,    0, 1359,    0,
     1359, 1359, 1359,    0,    0,    0,    0, 1359, 1360, 1360,
     1360, 1360,    0,    0, 1360,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1360,    0,    0,    0, 1360,
        0, 1360, 1360, 1360,    0,    0,    0,    0, 1360, 1361,
     1361, 1361, 1361,    0,    0, 1361,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1361, 1361,    0,    0,    0,
     1361,    0, 1361, 1361, 1361,    0,    0,    0,    0, 1361,
     1362,    0,    0,    0,    0, 1362,    0, 1362, 1362, 1362,
        0,    0,    0,    0, 1362, 1363,    0, 1363, 1363, 1363,

        0,    0,    0,    0, 1363, 1364,    0, 1364,    0,    0,
        0,    0, 1364,    0, 1364, 1364, 1364,    0,    0,    0,
        0, 1364, 1365,    0, 1365, 1365, 1365,    0,    0,    0,
        0, 1365, 1366,    0,    0,    0,    0, 1366,    0, 1366,
     1366, 1366,    0,    0,    0,    0, 1366, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367,    0, 1367, 1367, 1367, 1367,    0,
     1367,    0,    0, 1367, 1367, 1367, 1367, 1367, 1367, 1368,
        0, 1368, 1368, 1368,    0,    0,    0,    0, 1368, 1369,
        0, 1369, 1369, 1369,    0,    0,    0,    0, 1369, 1371,

     1371,    0, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1372,    0,    0, 1372,    0,    0,    0,    0, 1372,
        0, 1372, 1372, 1372, 1373,    0, 1373,    0, 1373, 1373,
        0, 1373,    0,    0,    0, 1373, 1373,    0, 1373, 1373,
     1373, 1374, 1374,    0, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1376,    0,    0, 1376,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1376,    0, 1376, 1376, 1376, 1377,
     1377,    0, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1378, 1378, 1378, 1378, 1378, 1379,    0,    0, 1379,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1379, 1379, 1379,
     1379, 1379, 1380, 1380,    0, 1380,    0,    0,    0,    0,
        0,    0,    0, 1380,    0, 1380, 1380,    0, 1380, 1380,

        0,    0, 1380, 1380,    0, 1380, 1380, 1380,    0, 1380,
     1381,    0,    0,    0,    0,    0, 1381,    0, 1381, 1381,
     1381, 1381, 1381,    0,    0, 1381, 1381, 1381, 1381, 1381,
     1381,    0,    0,    0,    0, 1381, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1383,    0,
        0,    0,    0,    0, 1383,    0, 1383, 1383, 1383, 1383,
     1383,    0,    0, 1383, 1383, 1383, 1383, 1383, 1383,    0,
        0,    0,    0, 1383, 1384, 1384,    0, 1384, 1384, 1384,

     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385,    0,    0,
        0,    0,    0, 1385,    0, 1385, 1385, 1385, 1385, 1385,
        0, 1385, 1385, 1385, 1385, 1385, 1385, 1385,    0,    0,
        0,    0, 1385, 1386,    0,    0,    0,    0,    0, 1386,
        0, 1386, 1386, 1386, 1386, 1386,    0,    0, 1386, 1386,
     1386, 1386, 1386, 1386,    0,    0,    0,    0, 1386, 1387,
        0, 1387, 1387, 1387,    0,    0,    0,    0, 1387, 1388,
     1388, 1388, 1388,    0,    0, 1388,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1388, 1388,    0,    0,    0,
     1388,    0, 1388, 1388, 1388,    0,    0,    0,    0, 1388,
     1389, 1389, 1389, 1389,    0,    0, 1389,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1389,    0,    0,
        0, 1389,    0, 1389, 1389, 1389,    0,    0,    0,    0,
     1389, 1390,    0, 1390,    0,    0,    0,    0, 1390,    0,
     1390, 1390, 1390,    0,    0,    0,    0, 1390, 1391,    0,
        0,    0,    0, 1391,    0, 1391, 1391, 1391,    0,    0,
        0,    0, 1391, 1392, 1392,    0, 1392,    0,    0,    0,
        0, 1392,    0, 1392, 1392, 1392, 1393, 1393,    0, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
        0, 1394,    0,    0,    0, 1394, 1394, 1394, 1394, 1394,
     1395, 1395, 1395, 1395,    0,    0, 1395,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1395, 1395,    0,    0,
        0, 1395,    0, 1395, 1395, 1395,    0,    0,    0,    0,
     1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,    0, 1396,
     1396, 1396, 1396,    0, 1396,    0, 1396,    0, 1396, 1396,
     1396, 1396, 1396, 1397, 1397,    0, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398,    0, 1398, 1398, 1398, 1398,    0, 1398,    0,
        0,    0, 1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1399, 1399, 1399, 1399,    0, 1399, 1399, 1399, 1399,    0,
     1399,    0,    0,    0, 1399, 1399, 1399, 1399, 1399, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,    0, 1400, 1400, 1400,
     1400,    0, 1400,    0,    0,    0, 1400, 1400, 1400, 1400,
     1400, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,    0, 1401,
     1401, 1401, 1401,    0, 1401,    0,    0,    0, 1401, 1401,
     1401, 1401, 1401, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);
static bool handleCopyBrief(const QCString &);
static bool handleCopyDetails(const QCString &);
static bool handleParBlock(const QCString &);
static bool handleEndParBlock(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "parblock",        &handleParBlock,         TRUE  },
  { "endparblock",     &handleEndParBlock,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             FALSE },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE  },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       &handleCopyBrief,        FALSE },
  { "copydetails",     &handleCopyDetails,      TRUE  },
  { "copyright",       0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "latexinclude",    0,                       FALSE },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  err("DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
bool inInternalDocs = FALSE;
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QCString         g_spaceBeforeCmd;
static QCString         g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
  g_insideParBlock = FALSE;
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si = Doxygen::sectionDict->find(anchorLabel);
    if (si)
    {
      if (si->lineNr != -1)
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel,si->fileName.data(),si->lineNr);
      }
      else
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel,si->fileName.data());
      }
    }
    else
    {
      si=new SectionInfo(listName,yyLineNr,anchorLabel,
                         g_sectionTitle,SectionInfo::Anchor,
                         g_sectionLevel);
      Doxygen::sectionDict->append(anchorLabel,si);
      docEntry->anchors->append(si);
    }
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  SectionInfo *si = Doxygen::sectionDict->find(g_sectionLabel);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",g_sectionLabel.data(),si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",g_sectionLabel.data(),si->fileName.data());
    }
  }
  else
  {
    // create a new section element
    g_sectionTitle+=commentscanYYtext;
    g_sectionTitle=g_sectionTitle.stripWhiteSpace();
    si = new SectionInfo(yyFileName,yyLineNr,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

    // add section to this entry
    current->anchors->append(si);

    // add section to the global dictionary
    Doxygen::sectionDict->append(g_sectionLabel,si);
  }
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentscanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentscanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */









































#line 4103 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

yy_size_t commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 969 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4349 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1173 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9784 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 988 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 991 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 994 "commentscan.l"
{ // mail address
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 997 "commentscan.l"
{ // quoted text
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1000 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 1003 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 1020 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1025 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1033 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1037 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1041 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentscanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1045 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1048 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1052 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1056 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1060 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1063 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1071 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentscanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
                                            int i=0;
                                            while (commentscanYYtext[i]==' ' || commentscanYYtext[i]=='\t') i++;
					    g_spaceBeforeCmd = QCString(commentscanYYtext).left(i);
					    if (cmdPtr->endsBrief && inContext!=OutputXRef) 
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            //if (i>0) addOutput(QCString(commentscanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentscanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentscanYYtext);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1117 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1120 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentscanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1128 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentscanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1140 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1145 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1150 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1154 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentscanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentscanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1167 "commentscan.l"
{ // escaped character
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1170 "commentscan.l"
{ // normal word
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1173 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentscanYYtext); 
					}
	YY_BREAK
case 29:
#line 1177 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1177 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentscanYYtext); 
                                          }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1192 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentscanYYtext); 
  					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1200 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentscanYYtext); 
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1203 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1209 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1212 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1215 "commentscan.l"
{ // numbered item
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1218 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1221 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentscanYYtext[0]);
  					  addOutput(commentscanYYtext[2]);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1225 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1228 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1231 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1234 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!g_insideParBlock) setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1265 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentscanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1273 "commentscan.l"
{ // newline
  					  addOutput(*commentscanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1277 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
#line 1284 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1285 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1288 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1290 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
#line 1295 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1300 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1305 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1311 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentscanYYtext; 
 					} 
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1314 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentscanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1319 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentscanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1325 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1329 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1333 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1341 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1346 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1350 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1354 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1363 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
#line 1368 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1372 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1376 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1385 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1390 "commentscan.l"
{ 
  					  current->name = substitute(removeRedundantWhiteSpace(commentscanYYtext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1394 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1403 "commentscan.l"
{
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1407 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1411 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1420 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1423 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentscanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1427 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1431 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1436 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1439 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentscanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1443 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1447 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1451 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 83:
YY_RULE_SETUP
#line 1456 "commentscan.l"
{ // group name
  					  current->name = commentscanYYtext;
					  //lastDefGroup.groupname = commentscanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1468 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1472 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1481 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1485 "commentscan.l"
{ // title (stored in type)
					  current->type += commentscanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1489 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
#line 1506 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1510 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1513 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1522 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1524 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentscanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1533 "commentscan.l"
{ // no file name specfied
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1538 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1542 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1545 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 98:
YY_RULE_SETUP
#line 1550 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentscanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1555 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1559 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1568 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1571 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentscanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1575 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1579 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1588 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1591 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentscanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1596 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1600 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1609 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 110:
YY_RULE_SETUP
#line 1615 "commentscan.l"
{ // argument
  					  current->relates = commentscanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentscanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1623 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1627 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1635 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1641 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1646 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1650 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 117:
YY_RULE_SETUP
#line 1656 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentscanYYtext;
                                          addOutput(commentscanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1662 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\section command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1670 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1676 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1681 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1686 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1690 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1694 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentscanYYtext[1];
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1698 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentscanYYtext[1];
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1702 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 127:
YY_RULE_SETUP
#line 1709 "commentscan.l"
{ // first argument
                                          addOutput(commentscanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentscanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1716 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\subpage command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1724 "commentscan.l"
{ // no title, end command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1728 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1732 "commentscan.l"
{ // no title, end of command
  					  unput(*commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 132:
YY_RULE_SETUP
#line 1739 "commentscan.l"
{ // found argument
                                          SectionInfo *si = Doxygen::sectionDict->find(commentscanYYtext);
                                          if (si)
                                          {
                                            if (si->lineNr != -1)
                                            {
                                              warn(yyFileName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",commentscanYYtext,si->fileName.data(),si->lineNr);
                                            }
                                            else
                                            {
                                              warn(yyFileName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",commentscanYYtext,si->fileName.data());
                                            }
                                          }
                                          else
                                          {
                                            si = new SectionInfo(yyFileName,yyLineNr,commentscanYYtext,0,SectionInfo::Anchor,0);
                                            Doxygen::sectionDict->append(commentscanYYtext,si);
  					    current->anchors->append(si);
                                          }
					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1761 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\anchor command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1769 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1779 "commentscan.l"
{ // possible ends
  					  addOutput(commentscanYYtext);
					  if (&commentscanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1786 "commentscan.l"
{ // some word
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1789 "commentscan.l"
{ // new line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1793 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1797 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentscanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1806 "commentscan.l"
{
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1809 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 141:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{
                                          g_guardExpr=commentscanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1824 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                        }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1827 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1831 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1839 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentscanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1845 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentscanYYtext);
  					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1848 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1854 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1858 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1861 "commentscan.l"
{
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1865 "commentscan.l"
{
  					  if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
					  {
					    addOutput(g_spaceBeforeIf);
					  }
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1873 "commentscan.l"
{
  					  unput(*commentscanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 153:
/* rule 153 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1880 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1884 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1888 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @endif without matching start command");
					  }
					  else
					  {
					    GuardedSection *s = guards.pop();
                                            bool parentVisible = s->parentVisible();
                                            delete s;
                                            if (parentVisible)
                                            {
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1906 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1923 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
                                              guardType=Guard_If;
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1939 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1943 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1945 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1951 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 162:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1955 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1958 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1961 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1969 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1976 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1983 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1990 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1997 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
					  BEGIN(Comment);
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2001 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2003 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 2009 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 2014 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2019 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentscanYYtext;
					  current->name+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 175:
YY_RULE_SETUP
#line 2026 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentscanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 2032 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2043 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2047 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 2053 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentscanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2062 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2066 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentscanYYtext;
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2069 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2073 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2077 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 2085 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					    addOutput('\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2099 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2103 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 188:
YY_RULE_SETUP
#line 2109 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 2115 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2123 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 191:
YY_RULE_SETUP
#line 2132 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 2138 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2146 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 194:
YY_RULE_SETUP
#line 2151 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentscanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2159 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 2161 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentscanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2164 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 198:
YY_RULE_SETUP
#line 2169 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentscanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 2174 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\cite command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2182 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2191 "commentscan.l"
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 2192 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2201 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2205 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2211 "commentscan.l"
ECHO;
	YY_BREAK
#line 6567 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1173 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1173 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1172);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2211 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(const QCString &)
{
  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@parblock ");
  g_insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(const QCString &)
{
  if (!g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput("@endparblock");
  setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
  g_insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(const QCString &)
{
  if (current->brief.isEmpty() && current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(OutputBrief);
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(const QCString &)
{
  setOutput(OutputDoc);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd.resize(0);
  g_spaceBeforeIf.resize(0);

  printlex(commentscanYY_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentscanYYrestart( commentscanYYin );
  BEGIN( Comment );
  commentscanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,lineNr,current,current->brief);
    current->doc        = processMarkdown(fileName,lineNr,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,lineNr,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,current->brief.data(),
               current->docLine,current->doc.data(),
               current->inbodyLine,current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d newEntryNeeded=%d\n",
  //  position,parseMore,newEntryNeeded);

  printlex(commentscanYY_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||  
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentscanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


