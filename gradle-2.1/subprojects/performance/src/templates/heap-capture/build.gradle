${original}

import java.lang.management.ManagementFactory
import java.math.RoundingMode

gradle.buildFinished {
    def heap = ManagementFactory.memoryMXBean.heapMemoryUsage
    def nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
    logger.lifecycle "BEFORE GC"
    logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, commited \${format(heap.committed)}, max \${format(heap.max)}"
    logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, commited \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"

    ManagementFactory.memoryMXBean.gc()
    heap = ManagementFactory.memoryMXBean.heapMemoryUsage
    nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
    logger.lifecycle "AFTER GC"
    logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, commited \${format(heap.committed)}, max \${format(heap.max)}"
    logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, commited \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"
    buildDir.mkdirs()
    new File(buildDir, "totalMemoryUsed.txt").text = heap.used
}

def format(def value) {
    value = value / (1024 * 1024)
    value = value.setScale(4, RoundingMode.DOWN)
    return "\${value}MB"
}
