<glossary>
    <title>Glossary</title>
    <glossdiv>
        <title>A</title>
        <glossentry>
            <glossterm>Artifact</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>B</title>
        <glossentry>
            <glossterm>Build Script</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>C</title>
        <glossentry>
            <glossterm>Configuration</glossterm>
            <glosssee otherterm="configuration"/>
        </glossentry>
        <glossentry>
            <glossterm>Configuration Injection</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>D</title>
        <glossentry>
            <glossterm>DAG</glossterm>
            <glosssee otherterm="dag"/>
        </glossentry>
        <glossentry>
            <glossterm>Dependency</glossterm>
            <glosssee otherterm="externalDependency"/>
            <glosssee otherterm="projectDependency"/>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry id="configuration">
            <glossterm>Dependency Configuration</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Dependency Resolution</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry id="dag">
            <glossterm>Directed Acyclic Graph</glossterm>
            <acronym>DAG</acronym>
            <glossdef>
                <para>A directed acyclic graph is a directed graph that contains no cycles. In Gradle each task to
                execute represents a node in the graph. A dependsOn relation to another task will add this
                other task as a node (if it is not in the graph already) and create a directed edge between
                those two nodes. Any dependsOn relation will be validated for cycles. There must be no way
                to start at certain node, follow a sequence of edges and end up at the original node.</para>
            </glossdef>
        </glossentry>
        <glossentry id="dsl">
            <glossterm>Domain Specific Language</glossterm>
            <acronym>DSL</acronym>
            <glossdef>
                <para>A domain-specific language is a programming language or specification language dedicated
                    to a particular problem domain, a particular problem representation technique, and/or a particular
                    solution technique. The concept isn't newâ€”special-purpose programming languages and all kinds of
                    modeling/specification languages have always existed, but the term has become more popular due to
                    the rise of domain-specific modeling.
                </para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>DSL</glossterm>
            <glosssee otherterm="dsl"/>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>E</title>
        <glossentry id="externalDependency">
            <glossterm>External Dependency</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Extension Object</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>I</title>
        <glossentry id="initScript">
            <glossterm>Init Script</glossterm>
            <glossdef>
                <para>A script that is run before the build itself starts, to allow customization of Gradle and the build.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Initialization Script</glossterm>
            <glosssee otherterm="initScript"/>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>P</title>
        <glossentry>
            <glossterm>Plugin</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Project</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry id="projectDependency">
            <glossterm>Project Dependency</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Publication</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>R</title>
        <glossentry>
            <glossterm>Repository</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>S</title>
        <glossentry>
            <glossterm>Source Set</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
    <glossdiv>
        <title>T</title>
        <glossentry>
            <glossterm>Task</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Transitive Dependency</glossterm>
            <glossdef>
                <para>??</para>
            </glossdef>
        </glossentry>
    </glossdiv>
</glossary>