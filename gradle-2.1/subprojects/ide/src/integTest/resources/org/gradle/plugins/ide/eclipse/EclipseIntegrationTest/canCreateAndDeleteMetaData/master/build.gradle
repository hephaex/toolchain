import org.gradle.api.internal.artifacts.ivyservice.CacheLayout

import java.util.regex.Pattern
import junit.framework.AssertionFailedError
import org.custommonkey.xmlunit.Diff
import org.custommonkey.xmlunit.ElementNameAndAttributeQualifier
import org.custommonkey.xmlunit.XMLAssert
import org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry
import org.junit.ComparisonFailure

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'xmlunit:xmlunit:1.3', 'junit:junit:4.8.1'
    }
}

defaultTasks 'eclipse', 'cleanEclipse'

allprojects {
    apply plugin: 'eclipse-wtp'

    group = 'org.gradle'

    plugins.withType(JavaBasePlugin) {
        sourceCompatibility = 1.5
    }
}

subprojects {
    repositories {
        mavenCentral()
    }

    group = 'org.gradle'
    version = '1.0'
}

allprojects {
    afterEvaluate { p ->
        configure(p) {
            eclipseProject.doLast {
                compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}Project.xml"),
                        file(".project"))
            }

            if (p.hasProperty('eclipseClasspath')) {
                eclipse {
                    classpath {
                        downloadJavadoc = true
                        //this hack is it avoid getting mad with xmlunit failures for whitespace
                        //and with futile attempts to resolve them properly.
                        file.whenMerged { classpath ->
                            classpath.entries.each { entry ->
                                if (entry instanceof AbstractClasspathEntry) {
                                    entry.entryAttributes.remove(AbstractClasspathEntry.COMPONENT_NON_DEPENDENCY_ATTRIBUTE)
                                }
                            }
                        }
                    }
                }
                eclipseClasspath {
                    doLast {
                        compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}Classpath.xml"),
                                file(".classpath"))
                    }
                }
            }

            if (p.hasProperty('eclipseJdt')) {
                eclipseJdt {
                    doLast {
                        compareProperties(getExpectedXml(file("$rootDir/../expectedFiles/${project.name}Jdt.properties")),
                                getActualXml(file(".settings/org.eclipse.jdt.core.prefs")))
                    }
                }
            }

            if (p.hasProperty('eclipseWtpComponent')) {
                eclipseWtpComponent {
                    doLast {
                        compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}WtpComponent.xml"),
                                file(".settings/org.eclipse.wst.common.component"))
                    }
                }
            }
            if (p.hasProperty('eclipseWtpFacet')) {
                eclipseWtpFacet {
                    doLast {
                        compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}WtpFacet.xml"),
                                file(".settings/org.eclipse.wst.common.project.facet.core.xml"))
                    }
                }
            }
            cleanEclipse.doLast {
                assert !file(".classpath").exists()
                assert !file(".project").exists()
                assert !file('.settings').exists() || file('.settings').listFiles().length == 0
            }
        }
    }
}

void compareProperties(String expectedProperties, String actualProperties) {
    Properties expected = new Properties()
    expected.load(new ByteArrayInputStream(expectedProperties.bytes))
    Properties actual = new Properties()
    actual.load(new ByteArrayInputStream(actualProperties.bytes))
    assert expected == actual
}

void compareXmlWithIgnoringOrder(File expectedFile, File actualFile) {
    String expectedXml = getExpectedXml(expectedFile)
    String actualXml = getActualXml(actualFile)
    Diff diff = new Diff(expectedXml, actualXml)
    diff.overrideElementQualifier(new ElementNameAndAttributeQualifier())
    try {
        XMLAssert.assertXMLEqual(diff, true)
    } catch (AssertionFailedError error) {
        println "EXPECTED:\n${expectedXml}"
        println "ACTUAL:\n${actualXml}"
        throw new ComparisonFailure("Comparison filure: expected: $expectedFile, actual: $actualFile"
            + "\nUnexpected content for generated file: ${error.message}", expectedXml, actualXml).initCause(error)
    }
}

String getExpectedXml(File file) {
    return file.text
}

String getActualXml(File file) {
    def homeDir = gradle.gradleUserHomeDir.absolutePath.replace(File.separator, '/')
    def pattern = Pattern.compile(Pattern.quote(homeDir) + "/caches/${CacheLayout.ROOT.getKey()}/${CacheLayout.FILE_STORE.getKey()}/([^/]+/[^/]+/[^/]+)/[a-z0-9]+/")
    def text = file.text.replaceAll(pattern, '@CACHE_DIR@/$1/@SHA1@/')
    pattern = Pattern.compile("GRADLE_USER_HOME/${CacheLayout.ROOT.getKey()}/${CacheLayout.FILE_STORE.getKey()}/([^/]+/[^/]+/[^/]+)/[a-z0-9]+/")
    text = text.replaceAll(pattern, 'GRADLE_USER_HOME/@CACHE@/$1/@SHA1@/')

    //remove trailing slashes for windows paths
    text = text.replaceAll("jar:file:/", 'jar:file:')
    return text
}

