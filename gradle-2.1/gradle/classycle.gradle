allprojects {
    ext.useClassycle = { params = [:] ->
        def excludePatterns = params.exclude ?: []

        configurations {
            classycle
        }

        dependencies {
            classycle 'classycle:classycle:1.4@jar'
        }

        task classycle

        sourceSets.all { sourceSet ->
            def taskName = sourceSet.getTaskName('classycle', null)
            task(taskName){
                def reportFile = reporting.file("classcycle/${sourceSet.name}.xml")
                inputs.files sourceSet.output
                outputs.file reportFile
                doLast {
                    if (!sourceSet.output.classesDir.directory) {
                        return;
                    }
                    ant.taskdef(name: "classycleDependencyCheck", classname: "classycle.ant.DependencyCheckingTask", classpath: configurations.classycle.asPath)
                    reportFile.parentFile.mkdirs()
                    try {
                        ant.classycleDependencyCheck(reportFile: reportFile, failOnUnwantedDependencies: true, mergeInnerClasses: true,
                                """
                        show allResults
                        check absenceOfPackageCycles > 1 in org.gradle.*
                    """
                        ) {
                            fileset(dir: sourceSet.output.classesDir) {
                                excludePatterns.each {
                                    exclude(name:it)
                                }
                            }
                        }
                    } catch(Exception e) {
                        throw new RuntimeException("Classycle check failed: $e.message. See report at ${new org.gradle.logging.ConsoleRenderer().asClickableFileUrl(reportFile)}", e)
                    }
                }
            }
            classycle.dependsOn taskName
            check.dependsOn taskName
            codeQuality.dependsOn taskName
        }
    }
}
